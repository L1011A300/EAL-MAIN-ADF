{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "EAL-MAIN-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PAIRINGblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_pairing",
								"type": "DatasetReference"
							},
							"name": "SFPairing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_PAIRING_TABLE",
								"type": "DatasetReference"
							},
							"name": "PARINGtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tpairing_id as string,\n\t\tuser_id as string,\n\t\tposition as string,\n\t\tname as string,\n\t\tdate as string,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFPairing\nSFPairing derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdate as date,\n\t\tend_date as date,\n\t\tname as string,\n\t\tpairing_id as string,\n\t\tposition as string,\n\t\tstart_date as date,\n\t\tupdated_at as string,\n\t\tuser_id as string,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tdate,\n\t\tend_date,\n\t\tname,\n\t\tpairing_id,\n\t\tposition,\n\t\tstart_date,\n\t\tupdated_at,\n\t\tuser_id,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t)) ~> PARINGtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SHIFTblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_shift",
								"type": "DatasetReference"
							},
							"name": "SFShift"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_SHIFT_TABLE",
								"type": "DatasetReference"
							},
							"name": "SHIFTtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tshift_id as string,\n\t\tuser_id as string,\n\t\tname as string,\n\t\tstart_time as string,\n\t\tend_time as string,\n\t\ttype as string,\n\t\tis_work as boolean,\n\t\tis_reserve as boolean,\n\t\tis_sick as boolean,\n\t\tis_training as boolean,\n\t\tis_vacation as boolean,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFShift\nSFShift derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tshift_id as string,\n\t\tuser_id as string,\n\t\tname as string,\n\t\tstart_time as timestamp,\n\t\tend_time as timestamp,\n\t\ttype as string,\n\t\tis_work as boolean,\n\t\tis_reserve as boolean,\n\t\tis_sick as boolean,\n\t\tis_training as boolean,\n\t\tis_vacation as boolean,\n\t\tupdated_at as string,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SHIFTtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TESTFltDataWthCategories_JOIN')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Adds \"FLIGHT_TYPE,\" \"FLIGHT_SUBTYPE\" and \"FLT_TYPE_OPS_REPORT\" columns to Flight table in SQL Server.",
				"folder": {
					"name": "TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_TABLE",
								"type": "DatasetReference"
							},
							"name": "SQLFltData"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix_csv",
								"type": "DatasetReference"
							},
							"name": "FltNbrRangeMatrixCSV",
							"description": "Import data from Flt_nbr_range_matrix_csv.\nMUST FORMAT DATES AS \"yyyy-MM-dd HH:mm:ss\""
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SF_FLT_CMBandSTDnbrs",
								"type": "DatasetReference"
							},
							"name": "FltDataToSQL"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1",
							"description": "Splits flight data into two sets: one with flight numbers beginning with \"CMB\" and another for purely numeric flight numbers."
						},
						{
							"name": "STDfltnbrRevCat",
							"description": "Changes flight data \"flt_type\" to \"flight_type\" and flt number range data \"FLIGHT_TYPE\" to \"REVENUE_TYPE\""
						},
						{
							"name": "CMBfltnbrRevCat",
							"description": "Assigns \"DOD Int'l\" revenue type to all flight numbers beginning with \"CMB.\""
						},
						{
							"name": "UnionCMBandSTDfltnbrs"
						},
						{
							"name": "ChangeFltNumToINT",
							"description": "Converts \"flight_number\" to integer."
						},
						{
							"name": "TrunkFltType",
							"description": "Renames \"flight_type\" to \"flt_type\" to avoid duplicate column names with \"FLIGHT_TYPE\" in FltNbrRangeMatrix."
						},
						{
							"name": "ChgFltNumToString",
							"description": "Converts \"flight_number\" to string."
						},
						{
							"name": "JoinToFltNbrRangeMatrix"
						},
						{
							"name": "ChangeBegEndFltNbrToInt",
							"description": "Converts \"BEGIN_FLT_NBR,\" \"END_FLT_NBR\" to integer."
						},
						{
							"name": "ChgColOrder",
							"description": "Reorder columns to match orig. dbo.SF_FLIGHT_PROD."
						}
					],
					"script": "source(output(\n\t\tactual_arrival_airport as string,\n\t\tactual_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_departure_airport as string,\n\t\tactual_oooi_in as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tbase_airport as string,\n\t\tbase_airport_id as string,\n\t\tcargo_off as integer,\n\t\tcargo_on as integer,\n\t\tcargo_weight as integer,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tflight_date as date,\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_type as string,\n\t\tfuel_in as double,\n\t\tfuel_out as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tis_canceled as string,\n\t\tis_verified as string,\n\t\tlndg_actual_braking as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_touchdown_zone as string,\n\t\tmaint_log_page as string,\n\t\tnotes as string,\n\t\tops_type as string,\n\t\tsched_arrive_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tscheduled_arrival as timestamp,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_departure_airport as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SQLFltData\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tBEGIN_FLT_NBR as string,\n\t\tEND_FLT_NBR as string,\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrRangeMatrixCSV\nSQLFltData split(startsWith(flight_number,'CMB'),\n\tdisjoint: false) ~> ConditionalSplit1@(CMBfltnbr, STDfltnbr)\nChgFltNumToString select(mapColumn(\n\t\tactual_arrival_airport,\n\t\tactual_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_departure_airport,\n\t\tactual_oooi_in,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_out,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tbase_airport,\n\t\tbase_airport_id,\n\t\tcargo_off,\n\t\tcargo_on,\n\t\tcargo_weight,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tflight_date,\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_type = flt_type,\n\t\tfuel_in,\n\t\tfuel_out,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tis_canceled,\n\t\tis_verified,\n\t\tlndg_actual_braking,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_touchdown_zone,\n\t\tmaint_log_page,\n\t\tnotes,\n\t\tops_type,\n\t\tsched_arrive_airport_id,\n\t\tsched_depart_airport_id,\n\t\tscheduled_arrival,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_departure_airport,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tREVENUE_TYPE = FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> STDfltnbrRevCat\nConditionalSplit1@CMBfltnbr derive(REVENUE_TYPE = \"DOD Int'l\",\n\t\tREVENUE_SUBTYPE = \"International\",\n\t\tFLT_TYPE_OPS_REPORT = \"DOD\") ~> CMBfltnbrRevCat\nCMBfltnbrRevCat, STDfltnbrRevCat union(byName: true)~> UnionCMBandSTDfltnbrs\nConditionalSplit1@STDfltnbr derive(flight_number = toInteger(flight_number),\n\t\tscheduled_departure = toString(scheduled_departure)) ~> ChangeFltNumToINT\nChangeFltNumToINT select(mapColumn(\n\t\tactual_arrival_airport,\n\t\tactual_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_departure_airport,\n\t\tactual_oooi_in,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_out,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tbase_airport,\n\t\tbase_airport_id,\n\t\tcargo_off,\n\t\tcargo_on,\n\t\tcargo_weight,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tflight_date,\n\t\tflight_id,\n\t\tflight_number,\n\t\tflt_type = flight_type,\n\t\tfuel_in,\n\t\tfuel_out,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tis_canceled,\n\t\tis_verified,\n\t\tlndg_actual_braking,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_touchdown_zone,\n\t\tmaint_log_page,\n\t\tnotes,\n\t\tops_type,\n\t\tsched_arrive_airport_id,\n\t\tsched_depart_airport_id,\n\t\tscheduled_arrival,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_departure_airport,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TrunkFltType\nJoinToFltNbrRangeMatrix derive(flight_number = toString(flight_number),\n\t\tscheduled_departure = toTimestamp(scheduled_departure,'yyyy-MM-dd HH:mm:ss')) ~> ChgFltNumToString\nTrunkFltType, ChangeBegEndFltNbrToInt join(flight_number >= BEGIN_FLT_NBR\n\t&& flight_number <= END_FLT_NBR\n\t&& scheduled_departure >= EFF_DATE\n\t&& scheduled_departure <= END_DATE,\n\tjoinType:'left',\n\tbroadcast: 'right')~> JoinToFltNbrRangeMatrix\nFltNbrRangeMatrixCSV derive(BEGIN_FLT_NBR = toInteger(BEGIN_FLT_NBR),\n\t\tEND_FLT_NBR = toInteger(END_FLT_NBR)) ~> ChangeBegEndFltNbrToInt\nUnionCMBandSTDfltnbrs select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tREVENUE_TYPE,\n\t\tREVENUE_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ChgColOrder\nChgColOrder sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FltDataToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TESTFltDataWthCategories_LOOKUP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_TABLE",
								"type": "DatasetReference"
							},
							"name": "SQLFltData"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix",
								"type": "DatasetReference"
							},
							"name": "FltNbrRangeMatrix"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SF_FLT_CMBandSTDnbrs",
								"type": "DatasetReference"
							},
							"name": "FltDataToSQL"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "LookupToFltNbrRange"
						},
						{
							"name": "STDfltnbrRevCat"
						},
						{
							"name": "CMBfltnbrRevCat"
						},
						{
							"name": "UnionCMBandSTDfltnbrs"
						},
						{
							"name": "ChangeFltNumToINT"
						},
						{
							"name": "TrunkFltType"
						},
						{
							"name": "ChgFltNumToString"
						}
					],
					"script": "source(output(\n\t\tactual_arrival_airport as string,\n\t\tactual_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_departure_airport as string,\n\t\tactual_oooi_in as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tbase_airport as string,\n\t\tbase_airport_id as string,\n\t\tcargo_off as integer,\n\t\tcargo_on as integer,\n\t\tcargo_weight as integer,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tflight_date as date,\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_type as string,\n\t\tfuel_in as double,\n\t\tfuel_out as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tis_canceled as string,\n\t\tis_verified as string,\n\t\tlndg_actual_braking as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_touchdown_zone as string,\n\t\tmaint_log_page as string,\n\t\tnotes as string,\n\t\tops_type as string,\n\t\tsched_arrive_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tscheduled_arrival as timestamp,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_departure_airport as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SQLFltData\nsource(output(\n\t\tEFF_DATE as timestamp 'yyyy.MM.dd HH:mm:ss',\n\t\tEND_DATE as timestamp 'yyyy.MM.dd HH:mm:ss',\n\t\tBEGIN_FLT_NBR as integer '##0',\n\t\tEND_FLT_NBR as integer '##0',\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrRangeMatrix\nSQLFltData split(startsWith(flight_number,'CMB'),\n\tdisjoint: false) ~> ConditionalSplit1@(CMBfltnbr, STDfltnbr)\nTrunkFltType, FltNbrRangeMatrix lookup(flight_number >= BEGIN_FLT_NBR\n\t&& flight_number <= END_FLT_NBR\n\t&& scheduled_departure >= EFF_DATE\n\t&& scheduled_departure <= END_DATE,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'right')~> LookupToFltNbrRange\nChgFltNumToString select(mapColumn(\n\t\tactual_arrival_airport,\n\t\tactual_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_departure_airport,\n\t\tactual_oooi_in,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_out,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tbase_airport,\n\t\tbase_airport_id,\n\t\tcargo_off,\n\t\tcargo_on,\n\t\tcargo_weight,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tflight_date,\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_type = flt_type,\n\t\tfuel_in,\n\t\tfuel_out,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tis_canceled,\n\t\tis_verified,\n\t\tlndg_actual_braking,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_touchdown_zone,\n\t\tmaint_log_page,\n\t\tnotes,\n\t\tops_type,\n\t\tsched_arrive_airport_id,\n\t\tsched_depart_airport_id,\n\t\tscheduled_arrival,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_departure_airport,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tREVENUE_TYPE = FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> STDfltnbrRevCat\nConditionalSplit1@CMBfltnbr derive(REVENUE_TYPE = \"DOD Int'l\",\n\t\tREVENUE_SUBTYPE = \"International\",\n\t\tFLT_TYPE_OPS_REPORT = \"DOD\") ~> CMBfltnbrRevCat\nCMBfltnbrRevCat, STDfltnbrRevCat union(byName: true)~> UnionCMBandSTDfltnbrs\nConditionalSplit1@STDfltnbr derive(flight_number = toInteger(flight_number)) ~> ChangeFltNumToINT\nChangeFltNumToINT select(mapColumn(\n\t\tactual_arrival_airport,\n\t\tactual_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_departure_airport,\n\t\tactual_oooi_in,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_out,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tbase_airport,\n\t\tbase_airport_id,\n\t\tcargo_off,\n\t\tcargo_on,\n\t\tcargo_weight,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tflight_date,\n\t\tflight_id,\n\t\tflight_number,\n\t\tflt_type = flight_type,\n\t\tfuel_in,\n\t\tfuel_out,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tis_canceled,\n\t\tis_verified,\n\t\tlndg_actual_braking,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_touchdown_zone,\n\t\tmaint_log_page,\n\t\tnotes,\n\t\tops_type,\n\t\tsched_arrive_airport_id,\n\t\tsched_depart_airport_id,\n\t\tscheduled_arrival,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_departure_airport,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TrunkFltType\nLookupToFltNbrRange derive(flight_number = toString(flight_number)) ~> ChgFltNumToString\nUnionCMBandSTDfltnbrs sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FltDataToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TESTFltDataWthCategories_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_TABLE",
								"type": "DatasetReference"
							},
							"name": "SQLFltData"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix",
								"type": "DatasetReference"
							},
							"name": "FltNbrRangeMatrix"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SF_FLT_CMBandSTDnbrs",
								"type": "DatasetReference"
							},
							"name": "FltDataToSQL"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1",
							"description": "Splits flight data into two sets: one with flight numbers beginning with \"CMB\" and another for purely numeric flight numbers."
						},
						{
							"name": "STDfltnbrRevCat",
							"description": "Changes flight data \"flt_type\" back to \"flight_type\" and changes flt number range data \"FLIGHT_TYPE\" to \"REVENUE_TYPE\""
						},
						{
							"name": "CMBfltnbrRevCat",
							"description": "Assigns \"DOD Int'l\" revenue type to all flight numbers beginning with \"CMB.\""
						},
						{
							"name": "UnionCMBandSTDfltnbrs"
						},
						{
							"name": "ChangeFltNumToINT",
							"description": "Changes \"flight_number\" to integer."
						},
						{
							"name": "TrunkFltType",
							"description": "Renaming flight_type to flt_type to avoid duplicate column names with FLIGHT_TYPE column in FltNbrRangeMatrix."
						},
						{
							"name": "ChgFltNumToString",
							"description": "Changes \"flight_number\" back to string from integer."
						},
						{
							"name": "JoinToFltNbrRangeMatrix"
						}
					],
					"script": "source(output(\n\t\tactual_arrival_airport as string,\n\t\tactual_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_departure_airport as string,\n\t\tactual_oooi_in as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tbase_airport as string,\n\t\tbase_airport_id as string,\n\t\tcargo_off as integer,\n\t\tcargo_on as integer,\n\t\tcargo_weight as integer,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tflight_date as date,\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_type as string,\n\t\tfuel_in as double,\n\t\tfuel_out as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tis_canceled as string,\n\t\tis_verified as string,\n\t\tlndg_actual_braking as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_touchdown_zone as string,\n\t\tmaint_log_page as string,\n\t\tnotes as string,\n\t\tops_type as string,\n\t\tsched_arrive_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tscheduled_arrival as timestamp,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_departure_airport as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SQLFltData\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tBEGIN_FLT_NBR as integer '##0',\n\t\tEND_FLT_NBR as integer '##0',\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrRangeMatrix\nSQLFltData split(startsWith(flight_number,'CMB'),\n\tdisjoint: false) ~> ConditionalSplit1@(CMBfltnbr, STDfltnbr)\nChgFltNumToString select(mapColumn(\n\t\tactual_arrival_airport,\n\t\tactual_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_departure_airport,\n\t\tactual_oooi_in,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_out,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tbase_airport,\n\t\tbase_airport_id,\n\t\tcargo_off,\n\t\tcargo_on,\n\t\tcargo_weight,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tflight_date,\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_type = flt_type,\n\t\tfuel_in,\n\t\tfuel_out,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tis_canceled,\n\t\tis_verified,\n\t\tlndg_actual_braking,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_touchdown_zone,\n\t\tmaint_log_page,\n\t\tnotes,\n\t\tops_type,\n\t\tsched_arrive_airport_id,\n\t\tsched_depart_airport_id,\n\t\tscheduled_arrival,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_departure_airport,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tREVENUE_TYPE = FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> STDfltnbrRevCat\nConditionalSplit1@CMBfltnbr derive(REVENUE_TYPE = \"DOD Int'l\",\n\t\tREVENUE_SUBTYPE = \"International\",\n\t\tFLT_TYPE_OPS_REPORT = \"DOD\") ~> CMBfltnbrRevCat\nCMBfltnbrRevCat, STDfltnbrRevCat union(byName: true)~> UnionCMBandSTDfltnbrs\nConditionalSplit1@STDfltnbr derive(flight_number = toInteger(flight_number)) ~> ChangeFltNumToINT\nChangeFltNumToINT select(mapColumn(\n\t\tactual_arrival_airport,\n\t\tactual_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_departure_airport,\n\t\tactual_oooi_in,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_out,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tbase_airport,\n\t\tbase_airport_id,\n\t\tcargo_off,\n\t\tcargo_on,\n\t\tcargo_weight,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tflight_date,\n\t\tflight_id,\n\t\tflight_number,\n\t\tflt_type = flight_type,\n\t\tfuel_in,\n\t\tfuel_out,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tis_canceled,\n\t\tis_verified,\n\t\tlndg_actual_braking,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_touchdown_zone,\n\t\tmaint_log_page,\n\t\tnotes,\n\t\tops_type,\n\t\tsched_arrive_airport_id,\n\t\tsched_depart_airport_id,\n\t\tscheduled_arrival,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_departure_airport,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TrunkFltType\nJoinToFltNbrRangeMatrix derive(flight_number = toString(flight_number)) ~> ChgFltNumToString\nTrunkFltType, FltNbrRangeMatrix join(between(flight_number,BEGIN_FLT_NBR,END_FLT_NBR) && between(scheduled_departure,EFF_DATE,END_DATE),\n\tjoinType:'cross',\n\tbroadcast: 'right')~> JoinToFltNbrRangeMatrix\nUnionCMBandSTDfltnbrs sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FltDataToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/USERCATEGORYblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_user_category",
								"type": "DatasetReference"
							},
							"name": "SFUserCategory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_USER_CATEGORY_TABLE",
								"type": "DatasetReference"
							},
							"name": "USERCATEGORYtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tuser_id as string,\n\t\tcategory_type as string,\n\t\teffective_start as string,\n\t\teffective_end as string,\n\t\tbase_icao_code as string,\n\t\tbase_iata_code as string,\n\t\tbase_faa_code as string,\n\t\tbase_name as string,\n\t\tequipment_group_name as string,\n\t\tequipment_group_code as string,\n\t\tposition_name as string,\n\t\tposition_code as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFUserCategory\nSFUserCategory derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> USERCATEGORYtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/USERblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_user",
								"type": "DatasetReference"
							},
							"name": "SFUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_USER_TABLE",
								"type": "DatasetReference"
							},
							"name": "USERtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFUser\nSFUser derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> USERtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQL_incr_base')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Uses SF flight blob file with Pax and Mission ID as source. Adds flight category. Creates temp flight number as integer for join to flt nbr range.",
				"folder": {
					"name": "TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights_TEST",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix_csv",
								"type": "DatasetReference"
							},
							"name": "FltNbrRangeMatrixCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLT_TABLE_TEST",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS",
							"description": "Adds ADF run ID and timestamp"
						},
						{
							"name": "FLTTYPEfilter",
							"description": "Filters out offline flights"
						},
						{
							"name": "ActualAirportIDifNULL",
							"description": "If actual depart/arrive airport ID is null, populates with sched depart/arrive airport ID."
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled departure airport."
						},
						{
							"name": "UpdateSchdDepAirportCode",
							"description": "Populates sched departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchdDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "SchdArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled arrival airport."
						},
						{
							"name": "UpdateSchdArrAirportCode",
							"description": "Populates sched arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual departure airport."
						},
						{
							"name": "UpdateActDepAirportCode",
							"description": "Populates actual departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual arrival airport."
						},
						{
							"name": "UpdateActArrAirportCode",
							"description": "Populates actual arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table. Changes \"pax\" column to \"SF_Pax\""
						},
						{
							"name": "ConditionalSplit1",
							"description": "Splits flight data into two sets: one with flight numbers beginning with \"CMB\" and another for purely numeric flight numbers."
						},
						{
							"name": "ChangeFltNumToINT",
							"description": "Adds temp \"flight_number_INT\" field to convert flight_number value to integer for join to flt number range matrix (keeping \"flight_number\" as string)."
						},
						{
							"name": "RenameFlightType",
							"description": "Renames \"flight_type\" to \"flt_type\" to avoid duplicate column names with \"FLIGHT_TYPE\" in FltNbrRangeMatrix."
						},
						{
							"name": "ChangeBegEndFltNbrToInt",
							"description": "Converts \"BEGIN_FLT_NBR,\" \"END_FLT_NBR\" to integer for use in join."
						},
						{
							"name": "JoinToFltNbrRangeMatrix",
							"description": "Joins flight data to flight number matrix on flt number and sked dep date to get flight type and subtype."
						},
						{
							"name": "CMBfltnbrRevCat",
							"description": "Assigns \"DOD Int'l\" revenue type to all flight numbers beginning with \"CMB.\""
						},
						{
							"name": "STDfltnbrRevCat",
							"description": "Changes flight data \"flt_type\" to \"flight_type\" and flt number range data \"FLIGHT_TYPE\" to \"REVENUE_TYPE\" and \"FLIGHT_SUBTYPE\" to \"REVENUE_SUBTYPE\". Drops EFF and END dates, BEGIN and END flt number fields from Flight Number Matrix. \"flight_number_INT\" field dropped."
						},
						{
							"name": "UnionCMBandSTDfltnmbrs",
							"description": "Combining rows from transformation 'CMBfltnbrRevCat, and STDfltnbrRevCat'"
						},
						{
							"name": "ChangeDateTimefieldstoTimestamp",
							"description": "Change date/time fields for OOOI, scheduled, estimated arr and dep times from string to timestamp to aid in SQL datatype determination."
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as integer,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as string,\n\t\tcargo_off as string,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as string,\n\t\tcustomer_name as string,\n\t\tcustomer_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tBEGIN_FLT_NBR as string,\n\t\tEND_FLT_NBR as string,\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrRangeMatrixCSV\nSFFlight derive(ADF_TIMESTAMP = currentDate(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax = pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols split(startsWith(flight_number,'CMB'),\n\tdisjoint: false) ~> ConditionalSplit1@(CMBfltnbr, STDfltnbr)\nConditionalSplit1@STDfltnbr derive(flight_number_INT = toInteger(flight_number)) ~> ChangeFltNumToINT\nChangeFltNumToINT select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflt_type = flight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tflight_number_INT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameFlightType\nFltNbrRangeMatrixCSV derive(BEGIN_FLT_NBR = toInteger(BEGIN_FLT_NBR),\n\t\tEND_FLT_NBR = toInteger(END_FLT_NBR)) ~> ChangeBegEndFltNbrToInt\nRenameFlightType, ChangeBegEndFltNbrToInt join(flight_number_INT >= BEGIN_FLT_NBR\n\t&& flight_number_INT <= END_FLT_NBR\n\t&& scheduled_departure >= EFF_DATE\n\t&& scheduled_departure <= END_DATE,\n\tjoinType:'left',\n\tbroadcast: 'right')~> JoinToFltNbrRangeMatrix\nConditionalSplit1@CMBfltnbr derive(REVENUE_TYPE = \"DOD Int'l\",\n\t\tREVENUE_SUBTYPE = \"International\",\n\t\tFLT_TYPE_OPS_REPORT = \"DOD Int'l\") ~> CMBfltnbrRevCat\nJoinToFltNbrRangeMatrix select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type = flt_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tREVENUE_TYPE = FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> STDfltnbrRevCat\nCMBfltnbrRevCat, STDfltnbrRevCat union(byName: true)~> UnionCMBandSTDfltnmbrs\nUnionCMBandSTDfltnmbrs derive(scheduled_departure = toTimestamp(scheduled_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tscheduled_arrival = toTimestamp(scheduled_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_out = toTimestamp(actual_oooi_out,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_off = toTimestamp(actual_oooi_off,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_on = toTimestamp(actual_oooi_on,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_in = toTimestamp(actual_oooi_in,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_arrival = toTimestamp(estimated_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_departure = toTimestamp(estimated_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tupdated_at = toTimestamp(updated_at,'yyyy-MM-dd HH:mm:ss')) ~> ChangeDateTimefieldstoTimestamp\nChangeDateTimefieldstoTimestamp sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as date,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_arrival as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_in as timestamp,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as string,\n\t\tnotes as string,\n\t\tis_canceled as string,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Airport_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates airport reference data in SQL Server DB from SkedFlex.",
				"activities": [
					{
						"name": "SF_airport_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_airport",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_airport",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "AIRPORTDtoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_airport_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AIRPORTblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFAirport": {},
									"AIRPORTtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DOD_Cntrlbl_delay_codes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trigger this pipeline manually any time there are changes to the set of DOD controllable delay codes.",
				"activities": [
					{
						"name": "DOD_CNTRLBL_DELAY_CODES",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DODCntrlblDelayCodes",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DodCntrlDelay": {},
									"DODCntrlDelayToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delay_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates flight delay and cancelation data in SQL Server DB from SkedFlex.",
				"activities": [
					{
						"name": "SF_Delay_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight_delay",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_delays",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DELAYStoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Delay_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DELAYSblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFDelay": {},
									"DelaysToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:56Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Equip_sched_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates aircraft maintenance scheduling data in SQL Server DB from SkedFlex.",
				"activities": [
					{
						"name": "SF_Equip_Sched_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_equip_sched",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_equip_sched",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "EQUIPSCHEDtoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Equip_Sched_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EQUIPSCHEDblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFEquipSched": {},
									"EQUIPSCHEDtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates flight data in SQL Server DB from SkedFlex.",
				"activities": [
					{
						"name": "SF_Flight_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "flight_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['flight_id']"
										}
									},
									{
										"source": {
											"name": "flight_number",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_number']"
										}
									},
									{
										"source": {
											"name": "flight_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['flight_date']"
										}
									},
									{
										"source": {
											"name": "aircraft_registration_number",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_registration_number']"
										}
									},
									{
										"source": {
											"name": "aircraft_type",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_type']"
										}
									},
									{
										"source": {
											"name": "ops_type",
											"type": "String"
										},
										"sink": {
											"path": "$['ops_type']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival']"
										}
									},
									{
										"source": {
											"name": "estimated_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_departure']"
										}
									},
									{
										"source": {
											"name": "estimated_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_arrival']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_out",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_out']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_off",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_off']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_on",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_on']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_in",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_in']"
										}
									},
									{
										"source": {
											"name": "base_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['base_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "base_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['base_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "actual_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_departure_airport']"
										}
									},
									{
										"source": {
											"name": "actual_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "is_verified",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_verified']"
										}
									},
									{
										"source": {
											"name": "notes",
											"type": "String"
										},
										"sink": {
											"path": "$['notes']"
										}
									},
									{
										"source": {
											"name": "is_canceled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_canceled']"
										}
									},
									{
										"source": {
											"name": "flight_type",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_type']"
										}
									},
									{
										"source": {
											"name": "cargo_weight",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_weight']"
										}
									},
									{
										"source": {
											"name": "cargo_on",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_on']"
										}
									},
									{
										"source": {
											"name": "cargo_off",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_off']"
										}
									},
									{
										"source": {
											"name": "fuel_out",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_out']"
										}
									},
									{
										"source": {
											"name": "fuel_in",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_in']"
										}
									},
									{
										"source": {
											"name": "fuel_uplift",
											"type": "Int32"
										},
										"sink": {
											"path": "$['fuel_uplift']"
										}
									},
									{
										"source": {
											"name": "fuel_uplifts",
											"type": "String"
										},
										"sink": {
											"path": "$['fuel_uplifts']"
										}
									},
									{
										"source": {
											"name": "maint_log_page",
											"type": "String"
										},
										"sink": {
											"path": "$['maint_log_page']"
										}
									},
									{
										"source": {
											"name": "lndg_touchdown_zone",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_touchdown_zone']"
										}
									},
									{
										"source": {
											"name": "lndg_midfield",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_midfield']"
										}
									},
									{
										"source": {
											"name": "lndg_rollout",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_rollout']"
										}
									},
									{
										"source": {
											"name": "lndg_actual_braking",
											"type": "String"
										},
										"sink": {
											"path": "$['lndg_actual_braking']"
										}
									},
									{
										"source": {
											"name": "pax",
											"type": "Int32"
										},
										"sink": {
											"path": "$['pax']"
										}
									},
									{
										"source": {
											"name": "mission_id",
											"type": "String"
										},
										"sink": {
											"path": "$['mission_id']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									},
									{
										"source": {
											"name": "customer_name",
											"type": "String"
										},
										"sink": {
											"path": "$['customer_name']"
										}
									},
									{
										"source": {
											"name": "customer_code",
											"type": "String"
										},
										"sink": {
											"path": "$['customer_code']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_flights_PAX",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "FLIGHTSblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Flight_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTSblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FltNbrRangeMatrixCSV": {},
									"FlightToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_data_TEST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FlightBlobToSQLTEST",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TESTFltDataWthCategories_JOIN",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SQLFltData": {},
									"FltNbrRangeMatrixCSV": {},
									"FltDataToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TESTFltDataWthCategories_JOIN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_data_TEST_Cust')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates flight data in SQL Server DB from SkedFlex.",
				"activities": [
					{
						"name": "SF_Flight_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "flight_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['flight_id']"
										}
									},
									{
										"source": {
											"name": "flight_number",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_number']"
										}
									},
									{
										"source": {
											"name": "flight_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['flight_date']"
										}
									},
									{
										"source": {
											"name": "aircraft_registration_number",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_registration_number']"
										}
									},
									{
										"source": {
											"name": "aircraft_type",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_type']"
										}
									},
									{
										"source": {
											"name": "ops_type",
											"type": "String"
										},
										"sink": {
											"path": "$['ops_type']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival']"
										}
									},
									{
										"source": {
											"name": "estimated_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_departure']"
										}
									},
									{
										"source": {
											"name": "estimated_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_arrival']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_out",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_out']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_off",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_off']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_on",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_on']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_in",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_in']"
										}
									},
									{
										"source": {
											"name": "base_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['base_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "base_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['base_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "actual_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_departure_airport']"
										}
									},
									{
										"source": {
											"name": "actual_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "is_verified",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_verified']"
										}
									},
									{
										"source": {
											"name": "notes",
											"type": "String"
										},
										"sink": {
											"path": "$['notes']"
										}
									},
									{
										"source": {
											"name": "is_canceled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_canceled']"
										}
									},
									{
										"source": {
											"name": "flight_type",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_type']"
										}
									},
									{
										"source": {
											"name": "cargo_weight",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_weight']"
										}
									},
									{
										"source": {
											"name": "cargo_on",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_on']"
										}
									},
									{
										"source": {
											"name": "cargo_off",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_off']"
										}
									},
									{
										"source": {
											"name": "fuel_out",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_out']"
										}
									},
									{
										"source": {
											"name": "fuel_in",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_in']"
										}
									},
									{
										"source": {
											"name": "fuel_uplift",
											"type": "Int32"
										},
										"sink": {
											"path": "$['fuel_uplift']"
										}
									},
									{
										"source": {
											"name": "fuel_uplifts",
											"type": "String"
										},
										"sink": {
											"path": "$['fuel_uplifts']"
										}
									},
									{
										"source": {
											"name": "maint_log_page",
											"type": "String"
										},
										"sink": {
											"path": "$['maint_log_page']"
										}
									},
									{
										"source": {
											"name": "lndg_touchdown_zone",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_touchdown_zone']"
										}
									},
									{
										"source": {
											"name": "lndg_midfield",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_midfield']"
										}
									},
									{
										"source": {
											"name": "lndg_rollout",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_rollout']"
										}
									},
									{
										"source": {
											"name": "lndg_actual_braking",
											"type": "String"
										},
										"sink": {
											"path": "$['lndg_actual_braking']"
										}
									},
									{
										"source": {
											"name": "pax",
											"type": "Int32"
										},
										"sink": {
											"path": "$['pax']"
										}
									},
									{
										"source": {
											"name": "mission_id",
											"type": "String"
										},
										"sink": {
											"path": "$['mission_id']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									},
									{
										"source": {
											"name": "customer_name",
											"type": "String"
										},
										"sink": {
											"path": "$['customer_name']"
										}
									},
									{
										"source": {
											"name": "customer_code",
											"type": "String"
										},
										"sink": {
											"path": "$['customer_code']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_flights_TEST",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "FLIGHTSblobtoSQL_TEST_Cust",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Flight_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTSblobtoSQL_TEST_Cust",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FltNbrRangeMatrixCSV": {},
									"FlightToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_data_deprecated_112221')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates flight data in SQL Server DB from SkedFlex.",
				"activities": [
					{
						"name": "SF_Flight_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "flight_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['flight_id']"
										}
									},
									{
										"source": {
											"name": "flight_number",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_number']"
										}
									},
									{
										"source": {
											"name": "flight_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['flight_date']"
										}
									},
									{
										"source": {
											"name": "aircraft_registration_number",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_registration_number']"
										}
									},
									{
										"source": {
											"name": "aircraft_type",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_type']"
										}
									},
									{
										"source": {
											"name": "ops_type",
											"type": "String"
										},
										"sink": {
											"path": "$['ops_type']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival']"
										}
									},
									{
										"source": {
											"name": "estimated_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_departure']"
										}
									},
									{
										"source": {
											"name": "estimated_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_arrival']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_out",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_out']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_off",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_off']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_on",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_on']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_in",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_in']"
										}
									},
									{
										"source": {
											"name": "base_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['base_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "base_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['base_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "actual_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_departure_airport']"
										}
									},
									{
										"source": {
											"name": "actual_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "is_verified",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_verified']"
										}
									},
									{
										"source": {
											"name": "notes",
											"type": "String"
										},
										"sink": {
											"path": "$['notes']"
										}
									},
									{
										"source": {
											"name": "is_canceled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_canceled']"
										}
									},
									{
										"source": {
											"name": "flight_type",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_type']"
										}
									},
									{
										"source": {
											"name": "cargo_weight",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_weight']"
										}
									},
									{
										"source": {
											"name": "cargo_on",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_on']"
										}
									},
									{
										"source": {
											"name": "cargo_off",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_off']"
										}
									},
									{
										"source": {
											"name": "fuel_out",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_out']"
										}
									},
									{
										"source": {
											"name": "fuel_in",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_in']"
										}
									},
									{
										"source": {
											"name": "fuel_uplift",
											"type": "Int32"
										},
										"sink": {
											"path": "$['fuel_uplift']"
										}
									},
									{
										"source": {
											"name": "fuel_uplifts",
											"type": "String"
										},
										"sink": {
											"path": "$['fuel_uplifts']"
										}
									},
									{
										"source": {
											"name": "maint_log_page",
											"type": "String"
										},
										"sink": {
											"path": "$['maint_log_page']"
										}
									},
									{
										"source": {
											"name": "lndg_touchdown_zone",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_touchdown_zone']"
										}
									},
									{
										"source": {
											"name": "lndg_midfield",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_midfield']"
										}
									},
									{
										"source": {
											"name": "lndg_rollout",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_rollout']"
										}
									},
									{
										"source": {
											"name": "lndg_actual_braking",
											"type": "String"
										},
										"sink": {
											"path": "$['lndg_actual_braking']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									},
									{
										"source": {
											"name": "mission_id",
											"type": "String"
										},
										"sink": {
											"path": "$['mission_id']"
										}
									},
									{
										"source": {
											"name": "pax",
											"type": "Int32"
										},
										"sink": {
											"path": "$['pax']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_flights",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "FLIGHTblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Flight_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTSblobtoSQLdeprecated112221",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FlightToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Inactive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_data_incr_base')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates flight data in SQL Server DB from SkedFlex.",
				"activities": [
					{
						"name": "SF_Flight_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "flight_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['flight_id']"
										}
									},
									{
										"source": {
											"name": "flight_number",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_number']"
										}
									},
									{
										"source": {
											"name": "flight_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['flight_date']"
										}
									},
									{
										"source": {
											"name": "aircraft_registration_number",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_registration_number']"
										}
									},
									{
										"source": {
											"name": "aircraft_type",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_type']"
										}
									},
									{
										"source": {
											"name": "ops_type",
											"type": "String"
										},
										"sink": {
											"path": "$['ops_type']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival']"
										}
									},
									{
										"source": {
											"name": "estimated_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_departure']"
										}
									},
									{
										"source": {
											"name": "estimated_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_arrival']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_out",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_out']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_off",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_off']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_on",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_on']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_in",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_in']"
										}
									},
									{
										"source": {
											"name": "base_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['base_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "base_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['base_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "actual_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_departure_airport']"
										}
									},
									{
										"source": {
											"name": "actual_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "is_verified",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_verified']"
										}
									},
									{
										"source": {
											"name": "notes",
											"type": "String"
										},
										"sink": {
											"path": "$['notes']"
										}
									},
									{
										"source": {
											"name": "is_canceled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_canceled']"
										}
									},
									{
										"source": {
											"name": "flight_type",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_type']"
										}
									},
									{
										"source": {
											"name": "cargo_weight",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_weight']"
										}
									},
									{
										"source": {
											"name": "cargo_on",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_on']"
										}
									},
									{
										"source": {
											"name": "cargo_off",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_off']"
										}
									},
									{
										"source": {
											"name": "fuel_out",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_out']"
										}
									},
									{
										"source": {
											"name": "fuel_in",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_in']"
										}
									},
									{
										"source": {
											"name": "fuel_uplift",
											"type": "Int32"
										},
										"sink": {
											"path": "$['fuel_uplift']"
										}
									},
									{
										"source": {
											"name": "fuel_uplifts",
											"type": "String"
										},
										"sink": {
											"path": "$['fuel_uplifts']"
										}
									},
									{
										"source": {
											"name": "maint_log_page",
											"type": "String"
										},
										"sink": {
											"path": "$['maint_log_page']"
										}
									},
									{
										"source": {
											"name": "lndg_touchdown_zone",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_touchdown_zone']"
										}
									},
									{
										"source": {
											"name": "lndg_midfield",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_midfield']"
										}
									},
									{
										"source": {
											"name": "lndg_rollout",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_rollout']"
										}
									},
									{
										"source": {
											"name": "lndg_actual_braking",
											"type": "String"
										},
										"sink": {
											"path": "$['lndg_actual_braking']"
										}
									},
									{
										"source": {
											"name": "pax",
											"type": "Int32"
										},
										"sink": {
											"path": "$['pax']"
										}
									},
									{
										"source": {
											"name": "mission_id",
											"type": "String"
										},
										"sink": {
											"path": "$['mission_id']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									},
									{
										"source": {
											"name": "customer_name",
											"type": "String"
										},
										"sink": {
											"path": "$['customer_name']"
										}
									},
									{
										"source": {
											"name": "customer_code",
											"type": "String"
										},
										"sink": {
											"path": "$['customer_code']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_flights_PAX",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "FLIGHTSblobtoSQLincrbase",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Flight_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTSblobtoSQL_incr_base",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FltNbrRangeMatrixCSV": {},
									"FlightToSQL": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLIGHTSblobtoSQL_incr_base')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_data_incr_update')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates flight data in SQL Server DB from SkedFlex.",
				"activities": [
					{
						"name": "SF_Flight_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set last ADF TS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "@concat('SELECT * FROM \"bi\".\"flight\"\nWHERE updated_at > ''',variables('last_ADF_TS'),'''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "flight_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['flight_id']"
										}
									},
									{
										"source": {
											"name": "flight_number",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_number']"
										}
									},
									{
										"source": {
											"name": "flight_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['flight_date']"
										}
									},
									{
										"source": {
											"name": "aircraft_registration_number",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_registration_number']"
										}
									},
									{
										"source": {
											"name": "aircraft_type",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_type']"
										}
									},
									{
										"source": {
											"name": "ops_type",
											"type": "String"
										},
										"sink": {
											"path": "$['ops_type']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival']"
										}
									},
									{
										"source": {
											"name": "estimated_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_departure']"
										}
									},
									{
										"source": {
											"name": "estimated_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_arrival']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_out",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_out']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_off",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_off']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_on",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_on']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_in",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_in']"
										}
									},
									{
										"source": {
											"name": "base_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['base_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "base_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['base_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "actual_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_departure_airport']"
										}
									},
									{
										"source": {
											"name": "actual_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "is_verified",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_verified']"
										}
									},
									{
										"source": {
											"name": "notes",
											"type": "String"
										},
										"sink": {
											"path": "$['notes']"
										}
									},
									{
										"source": {
											"name": "is_canceled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_canceled']"
										}
									},
									{
										"source": {
											"name": "flight_type",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_type']"
										}
									},
									{
										"source": {
											"name": "cargo_weight",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_weight']"
										}
									},
									{
										"source": {
											"name": "cargo_on",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_on']"
										}
									},
									{
										"source": {
											"name": "cargo_off",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_off']"
										}
									},
									{
										"source": {
											"name": "fuel_out",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_out']"
										}
									},
									{
										"source": {
											"name": "fuel_in",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_in']"
										}
									},
									{
										"source": {
											"name": "fuel_uplift",
											"type": "Int32"
										},
										"sink": {
											"path": "$['fuel_uplift']"
										}
									},
									{
										"source": {
											"name": "fuel_uplifts",
											"type": "String"
										},
										"sink": {
											"path": "$['fuel_uplifts']"
										}
									},
									{
										"source": {
											"name": "maint_log_page",
											"type": "String"
										},
										"sink": {
											"path": "$['maint_log_page']"
										}
									},
									{
										"source": {
											"name": "lndg_touchdown_zone",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_touchdown_zone']"
										}
									},
									{
										"source": {
											"name": "lndg_midfield",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_midfield']"
										}
									},
									{
										"source": {
											"name": "lndg_rollout",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_rollout']"
										}
									},
									{
										"source": {
											"name": "lndg_actual_braking",
											"type": "String"
										},
										"sink": {
											"path": "$['lndg_actual_braking']"
										}
									},
									{
										"source": {
											"name": "pax",
											"type": "Int32"
										},
										"sink": {
											"path": "$['pax']"
										}
									},
									{
										"source": {
											"name": "mission_id",
											"type": "String"
										},
										"sink": {
											"path": "$['mission_id']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									},
									{
										"source": {
											"name": "customer_name",
											"type": "String"
										},
										"sink": {
											"path": "$['customer_name']"
										}
									},
									{
										"source": {
											"name": "customer_code",
											"type": "String"
										},
										"sink": {
											"path": "$['customer_code']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight_TEST",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_flights_TEST",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "FLIGHTSblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Flight_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTSblobtoSQL_incr_update",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"lastADFTS": {
										"value": "@activity('Get_Prev_ADF_TIMESTAMP').output",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FltNbrRangeMatrixCSV": {},
									"SQLFLTTABLETESTPREV": {},
									"FlightToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get_Prev_ADF_TIMESTAMP",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT MAX([ADF_TIMESTAMP]) FROM [dbo].[SQL_FLIGHT_TABLE_TEST]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_FLT_TABLE_TEST",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set last ADF TS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get_Prev_ADF_TIMESTAMP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "last_ADF_TS",
							"value": {
								"value": "@string(activity('Get_Prev_ADF_TIMESTAMP').output)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"last_ADF_TS": {
						"type": "String",
						"defaultValue": "2022-03-24T15:41:51.157"
					}
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_number_range_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trigger this pipeline manually any time there are changes to the flight number range matrix.",
				"activities": [
					{
						"name": "Flt_nbr_data_to_SQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FltNbrRangeMatrixBlobToSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FltNbrMatrix": {},
									"FltNbrMatrixToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_offline_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FLIGHTOFLblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTS_OFLblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FlightToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Inactive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": []
		}
	]
}