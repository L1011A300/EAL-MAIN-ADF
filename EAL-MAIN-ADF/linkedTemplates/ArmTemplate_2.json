{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "EAL-MAIN-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PAIRINGITEMblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_pairing_item",
								"type": "DatasetReference"
							},
							"name": "SFPairingItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_PAIRING_ITEM_TABLE",
								"type": "DatasetReference"
							},
							"name": "PARINGITEMtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tpairing_id as string,\n\t\tpairing_item_id as string,\n\t\tpairing_item_type as string,\n\t\tflight_id as string,\n\t\tshift_name as string,\n\t\tshift_start_time as string,\n\t\tshift_end_time as string,\n\t\tshift_type as string,\n\t\tshift_is_work as boolean,\n\t\tshift_is_reserve as boolean,\n\t\tshift_is_sick as boolean,\n\t\tshift_is_training as boolean,\n\t\tshift_is_vacation as boolean,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFPairingItem\nSFPairingItem derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tpairing_id as string,\n\t\tpairing_item_id as string,\n\t\tpairing_item_type as string,\n\t\tflight_id as string,\n\t\tshift_name as string,\n\t\tshift_start_time as timestamp,\n\t\tshift_end_time as timestamp,\n\t\tshift_type as string,\n\t\tshift_is_work as boolean,\n\t\tshift_is_reserve as boolean,\n\t\tshift_is_sick as boolean,\n\t\tshift_is_training as boolean,\n\t\tshift_is_vacation as boolean,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> PARINGITEMtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PAIRINGblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_pairing",
								"type": "DatasetReference"
							},
							"name": "SFPairing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_PAIRING_TABLE",
								"type": "DatasetReference"
							},
							"name": "PARINGtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tpairing_id as string,\n\t\tuser_id as string,\n\t\tposition as string,\n\t\tname as string,\n\t\tdate as string,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFPairing\nSFPairing derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdate as date,\n\t\tend_date as date,\n\t\tname as string,\n\t\tpairing_id as string,\n\t\tposition as string,\n\t\tstart_date as date,\n\t\tupdated_at as string,\n\t\tuser_id as string,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tdate,\n\t\tend_date,\n\t\tname,\n\t\tpairing_id,\n\t\tposition,\n\t\tstart_date,\n\t\tupdated_at,\n\t\tuser_id,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t)) ~> PARINGtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/USERCATEGORYblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_user_category",
								"type": "DatasetReference"
							},
							"name": "SFUserCategory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_USER_CATEGORY_TABLE",
								"type": "DatasetReference"
							},
							"name": "USERCATEGORYtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tuser_id as string,\n\t\tcategory_type as string,\n\t\teffective_start as string,\n\t\teffective_end as string,\n\t\tbase_icao_code as string,\n\t\tbase_iata_code as string,\n\t\tbase_faa_code as string,\n\t\tbase_name as string,\n\t\tequipment_group_name as string,\n\t\tequipment_group_code as string,\n\t\tposition_name as string,\n\t\tposition_code as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFUserCategory\nSFUserCategory derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> USERCATEGORYtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/USERblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_user",
								"type": "DatasetReference"
							},
							"name": "SFUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_USER_TABLE",
								"type": "DatasetReference"
							},
							"name": "USERtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFUser\nSFUser derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> USERtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SHIFTblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_shift",
								"type": "DatasetReference"
							},
							"name": "SFShift"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_SHIFT_TABLE",
								"type": "DatasetReference"
							},
							"name": "SHIFTtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tshift_id as string,\n\t\tuser_id as string,\n\t\tname as string,\n\t\tstart_time as string,\n\t\tend_time as string,\n\t\ttype as string,\n\t\tis_work as boolean,\n\t\tis_reserve as boolean,\n\t\tis_sick as boolean,\n\t\tis_training as boolean,\n\t\tis_vacation as boolean,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFShift\nSFShift derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tshift_id as string,\n\t\tuser_id as string,\n\t\tname as string,\n\t\tstart_time as timestamp,\n\t\tend_time as timestamp,\n\t\ttype as string,\n\t\tis_work as boolean,\n\t\tis_reserve as boolean,\n\t\tis_sick as boolean,\n\t\tis_training as boolean,\n\t\tis_vacation as boolean,\n\t\tupdated_at as string,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SHIFTtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Airport_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_airport_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_airport",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_airport",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "AIRPORTDtoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_airport_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AIRPORTblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFAirport": {},
									"AIRPORTtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delay_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_Delay_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight_delay",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_delays",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DELAYStoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Delay_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DELAYSblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFDelay": {},
									"DelaysToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:56Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Equip_sched_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_Equip_Sched_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_equip_sched",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_equip_sched",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "EQUIPSCHEDtoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Equip_Sched_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EQUIPSCHEDblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFEquipSched": {},
									"EQUIPSCHEDtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_Flight_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "flight_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['flight_id']"
										}
									},
									{
										"source": {
											"name": "flight_number",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_number']"
										}
									},
									{
										"source": {
											"name": "flight_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['flight_date']"
										}
									},
									{
										"source": {
											"name": "aircraft_registration_number",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_registration_number']"
										}
									},
									{
										"source": {
											"name": "aircraft_type",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_type']"
										}
									},
									{
										"source": {
											"name": "ops_type",
											"type": "String"
										},
										"sink": {
											"path": "$['ops_type']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival']"
										}
									},
									{
										"source": {
											"name": "estimated_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_departure']"
										}
									},
									{
										"source": {
											"name": "estimated_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_arrival']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_out",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_out']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_off",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_off']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_on",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_on']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_in",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_in']"
										}
									},
									{
										"source": {
											"name": "base_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['base_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "base_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['base_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "actual_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_departure_airport']"
										}
									},
									{
										"source": {
											"name": "actual_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "is_verified",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_verified']"
										}
									},
									{
										"source": {
											"name": "notes",
											"type": "String"
										},
										"sink": {
											"path": "$['notes']"
										}
									},
									{
										"source": {
											"name": "is_canceled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_canceled']"
										}
									},
									{
										"source": {
											"name": "flight_type",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_type']"
										}
									},
									{
										"source": {
											"name": "cargo_weight",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_weight']"
										}
									},
									{
										"source": {
											"name": "cargo_on",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_on']"
										}
									},
									{
										"source": {
											"name": "cargo_off",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_off']"
										}
									},
									{
										"source": {
											"name": "fuel_out",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_out']"
										}
									},
									{
										"source": {
											"name": "fuel_in",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_in']"
										}
									},
									{
										"source": {
											"name": "fuel_uplift",
											"type": "Int32"
										},
										"sink": {
											"path": "$['fuel_uplift']"
										}
									},
									{
										"source": {
											"name": "fuel_uplifts",
											"type": "String"
										},
										"sink": {
											"path": "$['fuel_uplifts']"
										}
									},
									{
										"source": {
											"name": "maint_log_page",
											"type": "String"
										},
										"sink": {
											"path": "$['maint_log_page']"
										}
									},
									{
										"source": {
											"name": "lndg_touchdown_zone",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_touchdown_zone']"
										}
									},
									{
										"source": {
											"name": "lndg_midfield",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_midfield']"
										}
									},
									{
										"source": {
											"name": "lndg_rollout",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_rollout']"
										}
									},
									{
										"source": {
											"name": "lndg_actual_braking",
											"type": "String"
										},
										"sink": {
											"path": "$['lndg_actual_braking']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_flights",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "FLIGHTblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Flight_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTSblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FlightToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_offline_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FLIGHTOFLblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTS_OFLblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FlightToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pairing_Item_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF pairing item data to Azure blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "pairing_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['pairing_id']"
										}
									},
									{
										"source": {
											"name": "pairing_item_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['pairing_item_id']"
										}
									},
									{
										"source": {
											"name": "pairing_item_type",
											"type": "String"
										},
										"sink": {
											"path": "$['pairing_item_type']"
										}
									},
									{
										"source": {
											"name": "flight_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['flight_id']"
										}
									},
									{
										"source": {
											"name": "shift_name",
											"type": "String"
										},
										"sink": {
											"path": "$['shift_name']"
										}
									},
									{
										"source": {
											"name": "shift_start_time",
											"type": "String"
										},
										"sink": {
											"path": "$['shift_start_time']"
										}
									},
									{
										"source": {
											"name": "shift_end_time",
											"type": "String"
										},
										"sink": {
											"path": "$['shift_end_time']"
										}
									},
									{
										"source": {
											"name": "shift_type",
											"type": "String"
										},
										"sink": {
											"path": "$['shift_type']"
										}
									},
									{
										"source": {
											"name": "shift_is_work",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['shift_is_work']"
										}
									},
									{
										"source": {
											"name": "shift_is_reserve",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['shift_is_reserve']"
										}
									},
									{
										"source": {
											"name": "shift_is_sick",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['shift_is_sick']"
										}
									},
									{
										"source": {
											"name": "shift_is_training",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['shift_is_training']"
										}
									},
									{
										"source": {
											"name": "shift_is_vacation",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['shift_is_vacation']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_pairing_item",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_pairing_item",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "PAIRINGITEMblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF pairing item data to Azure blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PAIRINGITEMblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFPairingItem": {},
									"PARINGITEMtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PAIRINGITEMblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pairing_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF pairing data to Azure blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "pairing_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['pairing_id']"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['user_id']"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "String"
										},
										"sink": {
											"path": "$['position']"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"path": "$['name']"
										}
									},
									{
										"source": {
											"name": "date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['date']"
										}
									},
									{
										"source": {
											"name": "start_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['start_date']"
										}
									},
									{
										"source": {
											"name": "end_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['end_date']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_pairing",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_pairing",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "PAIRINGblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF pairing data to Azure blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PAIRINGblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFPairing": {},
									"PARINGtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PAIRINGblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/user_category_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF user category data to Azure blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "user_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['user_id']"
										}
									},
									{
										"source": {
											"name": "category_type",
											"type": "String"
										},
										"sink": {
											"path": "$['category_type']"
										}
									},
									{
										"source": {
											"name": "effective_start",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['effective_start']"
										}
									},
									{
										"source": {
											"name": "effective_end",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['effective_end']"
										}
									},
									{
										"source": {
											"name": "base_icao_code",
											"type": "String"
										},
										"sink": {
											"path": "$['base_icao_code']"
										}
									},
									{
										"source": {
											"name": "base_iata_code",
											"type": "String"
										},
										"sink": {
											"path": "$['base_iata_code']"
										}
									},
									{
										"source": {
											"name": "base_faa_code",
											"type": "String"
										},
										"sink": {
											"path": "$['base_faa_code']"
										}
									},
									{
										"source": {
											"name": "base_name",
											"type": "String"
										},
										"sink": {
											"path": "$['base_name']"
										}
									},
									{
										"source": {
											"name": "equipment_group_name",
											"type": "String"
										},
										"sink": {
											"path": "$['equipment_group_name']"
										}
									},
									{
										"source": {
											"name": "equipment_group_code",
											"type": "String"
										},
										"sink": {
											"path": "$['equipment_group_code']"
										}
									},
									{
										"source": {
											"name": "position_name",
											"type": "String"
										},
										"sink": {
											"path": "$['position_name']"
										}
									},
									{
										"source": {
											"name": "position_code",
											"type": "String"
										},
										"sink": {
											"path": "$['position_code']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_user_category",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_user_category",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "USERCATEGORYblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF user category data to Azure blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "USERCATEGORYblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFUserCategory": {},
									"USERCATEGORYtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/USERCATEGORYblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/user_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF user data to Azure blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "user_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['user_id']"
										}
									},
									{
										"source": {
											"name": "payroll_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['payroll_id']"
										}
									},
									{
										"source": {
											"name": "employee_id",
											"type": "String"
										},
										"sink": {
											"path": "$['employee_id']"
										}
									},
									{
										"source": {
											"name": "username",
											"type": "String"
										},
										"sink": {
											"path": "$['username']"
										}
									},
									{
										"source": {
											"name": "first_name",
											"type": "String"
										},
										"sink": {
											"path": "$['first_name']"
										}
									},
									{
										"source": {
											"name": "middle_name",
											"type": "String"
										},
										"sink": {
											"path": "$['middle_name']"
										}
									},
									{
										"source": {
											"name": "last_name",
											"type": "String"
										},
										"sink": {
											"path": "$['last_name']"
										}
									},
									{
										"source": {
											"name": "preferred_nickname",
											"type": "String"
										},
										"sink": {
											"path": "$['preferred_nickname']"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String"
										},
										"sink": {
											"path": "$['email']"
										}
									},
									{
										"source": {
											"name": "pilot_license",
											"type": "String"
										},
										"sink": {
											"path": "$['pilot_license']"
										}
									},
									{
										"source": {
											"name": "phone_numbers",
											"type": "String"
										},
										"sink": {
											"path": "$['phone_numbers']"
										}
									},
									{
										"source": {
											"name": "date_of_birth",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['date_of_birth']"
										}
									},
									{
										"source": {
											"name": "date_of_hire",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['date_of_hire']"
										}
									},
									{
										"source": {
											"name": "date_of_longevity",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['date_of_longevity']"
										}
									},
									{
										"source": {
											"name": "company_rank",
											"type": "Int32"
										},
										"sink": {
											"path": "$['company_rank']"
										}
									},
									{
										"source": {
											"name": "pilot_rank",
											"type": "Int32"
										},
										"sink": {
											"path": "$['pilot_rank']"
										}
									},
									{
										"source": {
											"name": "fa_rank",
											"type": "Int32"
										},
										"sink": {
											"path": "$['fa_rank']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									},
									{
										"source": {
											"name": "enabled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['enabled']"
										}
									},
									{
										"source": {
											"name": "deleted",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['deleted']"
										}
									},
									{
										"source": {
											"name": "is_disabled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_disabled']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_user",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_user",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "USERblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF user data to Azure blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "USERblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFUser": {},
									"USERtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/USERblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHT trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_FLIGHT_PROD SQL Server table",
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-16T09:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "EQUIP_SCHD trigger",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/shift_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF shift data to Azure blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "shift_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['shift_id']"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['user_id']"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"path": "$['name']"
										}
									},
									{
										"source": {
											"name": "start_time",
											"type": "String"
										},
										"sink": {
											"path": "$['start_time']"
										}
									},
									{
										"source": {
											"name": "end_time",
											"type": "String"
										},
										"sink": {
											"path": "$['end_time']"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String"
										},
										"sink": {
											"path": "$['type']"
										}
									},
									{
										"source": {
											"name": "is_work",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_work']"
										}
									},
									{
										"source": {
											"name": "is_reserve",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_reserve']"
										}
									},
									{
										"source": {
											"name": "is_sick",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_sick']"
										}
									},
									{
										"source": {
											"name": "is_training",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_training']"
										}
									},
									{
										"source": {
											"name": "is_vacation",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_vacation']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_shift",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_shift",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SHIFTblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF shift data to Azure blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SHIFTblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFShift": {},
									"SHIFTtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SHIFTblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AIRPORT trigger 7am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_AIRPORT_PROD SQL Server table at 7 a.m. EDT",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Airport_data",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-28T11:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Airport_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DELAYS trigger 7am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_DELAYS_PROD SQL Server table at 7 a.m. EDT",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Delay_data",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-28T11:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "AIRPORT trigger 7am",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Delay_data')]",
				"[concat(variables('factoryId'), '/triggers/AIRPORT trigger 7am')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EQUIP_SCHED trigger 7am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_EQUIP_SCHD_PROD SQL Server table at 7 a.m.",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Equip_sched_data",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-28T11:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "DELAYS trigger 7am",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Equip_sched_data')]",
				"[concat(variables('factoryId'), '/triggers/DELAYS trigger 7am')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHT trigger 7am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_FLIGHT_PROD SQL Server table at 7 a.m. EDT",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Flight_data",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-28T11:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "EQUIP_SCHED trigger 7am",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Flight_data')]",
				"[concat(variables('factoryId'), '/triggers/EQUIP_SCHED trigger 7am')]"
			]
		}
	]
}