{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "EAL-MAIN-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/EQUIP_SCHED trigger 7am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_EQUIP_SCHD_PROD SQL Server table at 7 a.m.",
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-28T11:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"count": 5,
						"intervalInSeconds": 240
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "DELAYS trigger 7am",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AIRPORTblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "SFAirport"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_AIRPORT_TABLE",
								"type": "DatasetReference"
							},
							"name": "AIRPORTtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFAirport\nSFAirport derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as double,\n\t\tlongitude as double,\n\t\televation_feet as integer,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> AIRPORTtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DELAYSblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_delays",
								"type": "DatasetReference"
							},
							"name": "SFDelay"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_DELAYS_TABLE",
								"type": "DatasetReference"
							},
							"name": "DelaysToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as string,\n\t\tdelay_type as string,\n\t\tduration_mins as string,\n\t\tdelay_code as string,\n\t\tdelay_code_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFDelay\nSFDelay derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tflight_id as integer,\n\t\tdelay_type as string,\n\t\tduration_mins as integer,\n\t\tdelay_code as string,\n\t\tdelay_code_name as string,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DelaysToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EQUIPSCHEDblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_equip_sched",
								"type": "DatasetReference"
							},
							"name": "SFEquipSched"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_EQUIP_SCHED_TABLE",
								"type": "DatasetReference"
							},
							"name": "EQUIPSCHEDtoSQL"
						}
					],
					"transformations": [
						{
							"name": "ADDWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\teqp_sched_id as string,\n\t\tac_registration as string,\n\t\tstatus_code as string,\n\t\tstatus_name as string,\n\t\tstatus_description as string,\n\t\tstart_time as string,\n\t\tend_time as string,\n\t\tnotes as string,\n\t\tis_deleted as boolean,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFEquipSched\nSFEquipSched derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> ADDWrkflwIDandTS\nADDWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\teqp_sched_id as string,\n\t\tac_registration as string,\n\t\tstatus_code as string,\n\t\tstatus_name as string,\n\t\tstatus_description as string,\n\t\tstart_time as timestamp,\n\t\tend_time as timestamp,\n\t\tnotes as string,\n\t\tis_deleted as boolean,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EQUIPSCHEDtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTCREWblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flight_crew",
								"type": "DatasetReference"
							},
							"name": "SFFlightCrew"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_CREW_TABLE",
								"type": "DatasetReference"
							},
							"name": "FLIGHTCREWtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFFlightCrew\nSFFlightCrew derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FLIGHTCREWtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTS_OFLblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_OFFLINE_TABLE",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						},
						{
							"name": "AircraftTYPEfilter"
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup"
						},
						{
							"name": "UpdateSchdDepAirportCode"
						},
						{
							"name": "RemoveSchdDepAirportCols"
						},
						{
							"name": "SchdArrAirportLookup"
						},
						{
							"name": "UpdateSchdArrAirportCode"
						},
						{
							"name": "RemoveSchArrAirportCols"
						},
						{
							"name": "RemoveOOOIcolumns"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as string,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as string,\n\t\tcargo_on as string,\n\t\tcargo_off as string,\n\t\tfuel_out as string,\n\t\tfuel_in as string,\n\t\tfuel_uplift as string,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nRemoveOOOIcolumns filter(aircraft_type <=> 'OFL') ~> AircraftTYPEfilter\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nAircraftTYPEfilter, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nAddWrkflwIDandTS select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveOOOIcolumns\nRemoveSchArrAirportCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_TABLE",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						},
						{
							"name": "FLTTYPEfilter"
						},
						{
							"name": "ActualAirportIDifNULL"
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup"
						},
						{
							"name": "UpdateSchdDepAirportCode"
						},
						{
							"name": "RemoveSchdDepAirportCols"
						},
						{
							"name": "SchdArrAirportLookup"
						},
						{
							"name": "UpdateSchdArrAirportCode"
						},
						{
							"name": "RemoveSchArrAirportCols"
						},
						{
							"name": "ActDepAirportLookup"
						},
						{
							"name": "UpdateActDepAirportCode"
						},
						{
							"name": "RemoveActDepAirportCols"
						},
						{
							"name": "ActArrAirportLookup"
						},
						{
							"name": "UpdateActArrAirportCode"
						},
						{
							"name": "RemoveActArrAirportCols"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as string,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as string,\n\t\tcargo_on as string,\n\t\tcargo_off as string,\n\t\tfuel_out as string,\n\t\tfuel_in as string,\n\t\tfuel_uplift as string,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tactual_arrival_airport as string,\n\t\tactual_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_departure_airport as string,\n\t\tactual_oooi_in as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tbase_airport as string,\n\t\tbase_airport_id as string,\n\t\tcargo_off as integer,\n\t\tcargo_on as integer,\n\t\tcargo_weight as integer,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tflight_date as date,\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_type as string,\n\t\tfuel_in as double,\n\t\tfuel_out as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tis_canceled as string,\n\t\tis_verified as string,\n\t\tlndg_actual_braking as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_touchdown_zone as string,\n\t\tmaint_log_page as string,\n\t\tnotes as string,\n\t\tops_type as string,\n\t\tsched_arrive_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tscheduled_arrival as timestamp,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_departure_airport as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQL_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix",
								"type": "DatasetReference"
							},
							"name": "FltNumRange"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLT_TABLE_TEST",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						},
						{
							"name": "FLTTYPEfilter"
						},
						{
							"name": "ActualAirportIDifNULL"
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup"
						},
						{
							"name": "UpdateSchdDepAirportCode"
						},
						{
							"name": "RemoveSchdDepAirportCols"
						},
						{
							"name": "SchdArrAirportLookup"
						},
						{
							"name": "UpdateSchdArrAirportCode"
						},
						{
							"name": "RemoveSchArrAirportCols"
						},
						{
							"name": "ActDepAirportLookup"
						},
						{
							"name": "UpdateActDepAirportCode"
						},
						{
							"name": "RemoveActDepAirportCols"
						},
						{
							"name": "ActArrAirportLookup"
						},
						{
							"name": "UpdateActArrAirportCode"
						},
						{
							"name": "RemoveActArrAirportCols"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as string,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as string,\n\t\tcargo_on as string,\n\t\tcargo_off as string,\n\t\tfuel_out as string,\n\t\tfuel_in as string,\n\t\tfuel_uplift as string,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tBEGIN_FLT_NBR as string,\n\t\tEND_FLT_NBR as string,\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNumRange\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols, FltNumRange lookup(flight_number >= BEGIN_FLT_NBR\n\t&& flight_number <= END_FLT_NBR\n\t&& scheduled_departure >= EFF_DATE\n\t&& scheduled_departure <= END_DATE,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'right')~> Lookup1\nLookup1 select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type = RemoveActArrAirportCols@flight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tREVENUE_TYPE = FltNumRange@FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FltNbrRangeMatrixBlobToSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix",
								"type": "DatasetReference"
							},
							"name": "FltNbrMatrix"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FLT_NBR_RANGE_PROD",
								"type": "DatasetReference"
							},
							"name": "FltNbrMatrixToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tEFF_DATE as date 'yyyy-MM-dd',\n\t\tEND_DATE as date 'yyyy-MM-dd',\n\t\tBEGIN_FLT_NBR as integer '##0',\n\t\tEND_FLT_NBR as integer '##0',\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrMatrix\nFltNbrMatrix derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FltNbrMatrixToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MIS_Choice_Pax_Bags_to_SQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MIS_Choice_Pax_Bags",
								"type": "DatasetReference"
							},
							"name": "MISChoicePaxBagsBlob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_MIS_CHOICE_PAX_BAGS_TABLE",
								"type": "DatasetReference"
							},
							"name": "MISCHOICEPAXBAGSSQL"
						}
					],
					"transformations": [
						{
							"name": "PareMISData"
						},
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\tRunId as string\n}\nsource(output(\n\t\tFlight as (ID as string, SegmentNo as integer, ExternalID as string, CarrierCode as string, FlightNo as string, MarketingCarrierCode as string, MarketingFlightNo as string, Type as string, TailNo as string, OriginIATA as string, OriginICAO as string, OriginAirportName as string, OriginAirportCity as string, OriginAirportCountryCode as string, DepartureTerminal as string, DepartureGate as string, DestinationIATA as string, DestinationICAO as string, DestinationAirportName as string, DestinationAirportCity as string, DestinationAirportCountryCode as string, ArrivalTerminal as string, ArrivalGate as string, ScheduledDepartureTime as string, ScheduledDepartureTimeUTC as string, EstimatedDepartureTime as string, ScheduledArrivalTime as string, EstimatedArrivalTime as string, BoardingTime as string, Message as string, Status as string, EnablePassengerAPIS as boolean, EnableCrewAPIS as boolean, EnableDCS as boolean, WeightUnitsKgs as boolean, IsOpenSeating as boolean, IsProgressiveFlight as boolean, EnableThroughCheckIn as boolean, EnableIatciCheckIn as boolean, EnableBoarding as boolean, UseAveragePaxWeight as boolean, UseAverageBagWeight as boolean, PnlImported as boolean, IsCancelled as boolean, CancelledBy as string, CancelledReason as string, IsLocked as boolean, LockedBy as string, LockedReason as string, AircraftCapacity as integer, BookedPassengersCount as integer, TotalCargoLoad as integer, UpliftFuelLoad as integer, TotalFuelLoad as integer, RemainingFuelLoad as integer, Carrier as (CarrierName as string, Code as string, IATA as string, ICAO as string, ApisCarrierCode as string, IataMessagingCode as string, Prefix as string, Address as (ID as string, Location as string, Street1 as string, Street2 as string, City as string, StateCode as string, PostalCode as string, CountryCode as string, CustomData as (Properties as ({} as string))), Email as string, Website as string, Logo as string, Icon as string, DefaultFlightType as integer, DefaultIsTestEnvironment as boolean, DefaultIsOpenSeating as boolean, DefaultIsEnableBSMs as boolean, DefaultIsProgressiveFlight as boolean, DefaultEnableThroughCheckIn as boolean, DefaultEnableIatciCheckIn as boolean, DefaultDomesticBoardingTime as integer, DefaultInternationalBoardingTime as integer, DefaultWeightUnitsKgs as boolean, DefaultUseAveragePaxWeight as boolean, DefaultUseAverageBagWeight as boolean, DefaultAdultAge as integer, DefaultAverageAdultMaleWeight as integer, DefaultAverageAdultFemaleWeight as integer, DefaultChildAge as integer, SeatMapChildAge as integer, DefaultAverageChildWeight as integer, DefaultPassengerPaddedWeight as integer, HeavyBagAverageWeight as integer, HeavyBagThresholdWeight as integer, LifBagWeightCoefficientType as integer, LifBagAverageWeight as double, DefaultCurrencyCode as string, CurrencyConversionRounding as integer, ApisSenderID as string, ApisContactName as string, ApisTelephone as string, ApisFax as string, ApisEmail as string, TsaPreCheck as boolean, PnlImportCloseTime as integer, AdlImportCloseTime as integer, PermanentlyDeleteCancelledReservationsOnManifestImport as boolean, DefaultResidenceToNationalityOnManifestImport as boolean, IncludePassengerIdElementOnIataMessages as boolean, PrintFlightMessageOnBP as boolean, PrintOperatedByOnBP as boolean, PrintSSRsOnBP as boolean, PrintDocsOkForVerifiedPassengersOnBP as boolean, PrintReturnConnectingFlightBP as boolean, PrintBagWeightOnBT as boolean, IsPrintingBagTagWithoutCheckInAllowed as boolean, AllowBagsWithNoWeight as boolean, AllowPermanentDeleteNonPrintedBags as boolean, MaximumPassengerBags as integer, EmergencySeatInstructions as string, PremiumSeatInstructions as string, EmergencySeatGateStopInstructions as string, SelecteeGateStopInstructions as string, UnverifiedDocumentsGateStopInstructions as string, WatchlistNoFlyMatchInstructions as string, WatchlistPreventMatchInstructions as string, WatchlistSelecteeMatchInstructions as string, EmailSenderAddress as string, IsBoardingPassPrintWithUnpaidAncillariesAllowed as boolean, CustomData as (Properties as ({} as string))), AncillaryTemplateID as string, CustomerID as string, ApiInterfaceIDs as string, BatchPassengerMask as string, BatchCrewMemberMask as string, PreDepartureCloseOutPassengerMask as string, PostDepartureCloseOutPassengerMask as string, PreDepartureCloseOutCrewMemberMask as string, PostDepartureCloseOutCrewMemberMask as string, PaxFlightPreDepartureCloseOutStatus as string, PaxFlightPostDepartureCloseOutStatus as string, CrewFlightPreDepartureCloseOutStatus as string, CrewFlightPostDepartureCloseOutStatus as string, PaxBatchPreVetStatus as string, HasPassengerSecurityTransactions as boolean, HealthCheckRule as (ID as string, CarrierCode as string, OriginCountryEntity as string, DestinationCountryEntity as string, OriginAirport as string, DestinationAirport as string, Instructions as string, IsClearToBoard as boolean, IsRequirePassengerAttestation as boolean, AttestationMinorStartAge as integer, AttestationMinorEndAge as integer, IsRequireProofForRemoteCheckIn as boolean, IsRequireRemarksForFailStatus as boolean, IsActive as boolean, CreatedBy as string, CreatedTimestampUTC as string, UpdatedBy as string), IsNotificationAlertsOptional as boolean, IsContactTracingOptional as boolean, IsHealthCheckVerificationOptional as boolean, IsHealthCheckAttestationOptional as boolean, IsTestEnvironment as boolean, CheckedInPassengersCount as integer, CheckedBagsCount as integer, CustomData as (Properties as ({} as string))),\n\t\tSuccess as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> MISChoicePaxBagsBlob\nMISChoicePaxBagsBlob select(mapColumn(\n\t\tID = Flight.ID,\n\t\tSegmentNo = Flight.SegmentNo,\n\t\tExternalID = Flight.ExternalID,\n\t\tFlightNo = Flight.FlightNo,\n\t\tType = Flight.Type,\n\t\tTailNo = Flight.TailNo,\n\t\tOriginIATA = Flight.OriginIATA,\n\t\tDestinationIATA = Flight.DestinationIATA,\n\t\tScheduledDepartureTimeUTC = Flight.ScheduledDepartureTimeUTC,\n\t\tStatus = Flight.Status,\n\t\tCheckedInPassengersCount = Flight.CheckedInPassengersCount,\n\t\tCheckedBagsCount = Flight.CheckedBagsCount,\n\t\tBookedPassengersCount = Flight.BookedPassengersCount\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareMISData\nPareMISData derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $RunId) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> MISCHOICEPAXBAGSSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PAIRINGITEMblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_pairing_item",
								"type": "DatasetReference"
							},
							"name": "SFPairingItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_PAIRING_ITEM_TABLE",
								"type": "DatasetReference"
							},
							"name": "PARINGITEMtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tpairing_id as string,\n\t\tpairing_item_id as string,\n\t\tpairing_item_type as string,\n\t\tflight_id as string,\n\t\tshift_name as string,\n\t\tshift_start_time as string,\n\t\tshift_end_time as string,\n\t\tshift_type as string,\n\t\tshift_is_work as boolean,\n\t\tshift_is_reserve as boolean,\n\t\tshift_is_sick as boolean,\n\t\tshift_is_training as boolean,\n\t\tshift_is_vacation as boolean,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFPairingItem\nSFPairingItem derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tpairing_id as string,\n\t\tpairing_item_id as string,\n\t\tpairing_item_type as string,\n\t\tflight_id as string,\n\t\tshift_name as string,\n\t\tshift_start_time as timestamp,\n\t\tshift_end_time as timestamp,\n\t\tshift_type as string,\n\t\tshift_is_work as boolean,\n\t\tshift_is_reserve as boolean,\n\t\tshift_is_sick as boolean,\n\t\tshift_is_training as boolean,\n\t\tshift_is_vacation as boolean,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> PARINGITEMtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PAIRINGblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_pairing",
								"type": "DatasetReference"
							},
							"name": "SFPairing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_PAIRING_TABLE",
								"type": "DatasetReference"
							},
							"name": "PARINGtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tpairing_id as string,\n\t\tuser_id as string,\n\t\tposition as string,\n\t\tname as string,\n\t\tdate as string,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFPairing\nSFPairing derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdate as date,\n\t\tend_date as date,\n\t\tname as string,\n\t\tpairing_id as string,\n\t\tposition as string,\n\t\tstart_date as date,\n\t\tupdated_at as string,\n\t\tuser_id as string,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tdate,\n\t\tend_date,\n\t\tname,\n\t\tpairing_id,\n\t\tposition,\n\t\tstart_date,\n\t\tupdated_at,\n\t\tuser_id,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t)) ~> PARINGtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SHIFTblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_shift",
								"type": "DatasetReference"
							},
							"name": "SFShift"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_SHIFT_TABLE",
								"type": "DatasetReference"
							},
							"name": "SHIFTtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tshift_id as string,\n\t\tuser_id as string,\n\t\tname as string,\n\t\tstart_time as string,\n\t\tend_time as string,\n\t\ttype as string,\n\t\tis_work as boolean,\n\t\tis_reserve as boolean,\n\t\tis_sick as boolean,\n\t\tis_training as boolean,\n\t\tis_vacation as boolean,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFShift\nSFShift derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tshift_id as string,\n\t\tuser_id as string,\n\t\tname as string,\n\t\tstart_time as timestamp,\n\t\tend_time as timestamp,\n\t\ttype as string,\n\t\tis_work as boolean,\n\t\tis_reserve as boolean,\n\t\tis_sick as boolean,\n\t\tis_training as boolean,\n\t\tis_vacation as boolean,\n\t\tupdated_at as string,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SHIFTtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/USERCATEGORYblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_user_category",
								"type": "DatasetReference"
							},
							"name": "SFUserCategory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_USER_CATEGORY_TABLE",
								"type": "DatasetReference"
							},
							"name": "USERCATEGORYtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tuser_id as string,\n\t\tcategory_type as string,\n\t\teffective_start as string,\n\t\teffective_end as string,\n\t\tbase_icao_code as string,\n\t\tbase_iata_code as string,\n\t\tbase_faa_code as string,\n\t\tbase_name as string,\n\t\tequipment_group_name as string,\n\t\tequipment_group_code as string,\n\t\tposition_name as string,\n\t\tposition_code as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFUserCategory\nSFUserCategory derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> USERCATEGORYtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/USERblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_user",
								"type": "DatasetReference"
							},
							"name": "SFUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_USER_TABLE",
								"type": "DatasetReference"
							},
							"name": "USERtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFUser\nSFUser derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> USERtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TESTFltDataWthCategories')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_TABLE",
								"type": "DatasetReference"
							},
							"name": "SQLFltData"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix",
								"type": "DatasetReference"
							},
							"name": "FltNbrRangeMatrix"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SF_FLT_CMBandSTDnbrs",
								"type": "DatasetReference"
							},
							"name": "FltDataToSQL"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "LookupToFltNbrRange"
						},
						{
							"name": "STDfltnbrRevCat"
						},
						{
							"name": "CMBfltnbrRevCat"
						},
						{
							"name": "UnionCMBandSTDfltnbrs"
						},
						{
							"name": "ChangeFltNumToINT"
						},
						{
							"name": "TrunkFltType"
						},
						{
							"name": "ChgFltNumToString"
						}
					],
					"script": "source(output(\n\t\tactual_arrival_airport as string,\n\t\tactual_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_departure_airport as string,\n\t\tactual_oooi_in as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tbase_airport as string,\n\t\tbase_airport_id as string,\n\t\tcargo_off as integer,\n\t\tcargo_on as integer,\n\t\tcargo_weight as integer,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tflight_date as date,\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_type as string,\n\t\tfuel_in as double,\n\t\tfuel_out as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tis_canceled as string,\n\t\tis_verified as string,\n\t\tlndg_actual_braking as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_touchdown_zone as string,\n\t\tmaint_log_page as string,\n\t\tnotes as string,\n\t\tops_type as string,\n\t\tsched_arrive_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tscheduled_arrival as timestamp,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_departure_airport as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SQLFltData\nsource(output(\n\t\tEFF_DATE as timestamp 'yyyy.MM.dd HH:mm:ss',\n\t\tEND_DATE as timestamp 'yyyy.MM.dd HH:mm:ss',\n\t\tBEGIN_FLT_NBR as integer '##0',\n\t\tEND_FLT_NBR as integer '##0',\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrRangeMatrix\nSQLFltData split(startsWith(flight_number,'CMB'),\n\tdisjoint: false) ~> ConditionalSplit1@(CMBfltnbr, STDfltnbr)\nTrunkFltType, FltNbrRangeMatrix lookup(flight_number >= BEGIN_FLT_NBR\n\t&& flight_number <= END_FLT_NBR\n\t&& scheduled_departure >= EFF_DATE\n\t&& scheduled_departure <= END_DATE,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'right')~> LookupToFltNbrRange\nChgFltNumToString select(mapColumn(\n\t\tactual_arrival_airport,\n\t\tactual_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_departure_airport,\n\t\tactual_oooi_in,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_out,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tbase_airport,\n\t\tbase_airport_id,\n\t\tcargo_off,\n\t\tcargo_on,\n\t\tcargo_weight,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tflight_date,\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_type = flt_type,\n\t\tfuel_in,\n\t\tfuel_out,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tis_canceled,\n\t\tis_verified,\n\t\tlndg_actual_braking,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_touchdown_zone,\n\t\tmaint_log_page,\n\t\tnotes,\n\t\tops_type,\n\t\tsched_arrive_airport_id,\n\t\tsched_depart_airport_id,\n\t\tscheduled_arrival,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_departure_airport,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tREVENUE_TYPE = FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> STDfltnbrRevCat\nConditionalSplit1@CMBfltnbr derive(REVENUE_TYPE = \"DOD Int'l\",\n\t\tREVENUE_SUBTYPE = \"International\",\n\t\tFLT_TYPE_OPS_REPORT = \"DOD\") ~> CMBfltnbrRevCat\nCMBfltnbrRevCat, STDfltnbrRevCat union(byName: true)~> UnionCMBandSTDfltnbrs\nConditionalSplit1@STDfltnbr derive(flight_number = toInteger(flight_number)) ~> ChangeFltNumToINT\nChangeFltNumToINT select(mapColumn(\n\t\tactual_arrival_airport,\n\t\tactual_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_departure_airport,\n\t\tactual_oooi_in,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_out,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tbase_airport,\n\t\tbase_airport_id,\n\t\tcargo_off,\n\t\tcargo_on,\n\t\tcargo_weight,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tflight_date,\n\t\tflight_id,\n\t\tflight_number,\n\t\tflt_type = flight_type,\n\t\tfuel_in,\n\t\tfuel_out,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tis_canceled,\n\t\tis_verified,\n\t\tlndg_actual_braking,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_touchdown_zone,\n\t\tmaint_log_page,\n\t\tnotes,\n\t\tops_type,\n\t\tsched_arrive_airport_id,\n\t\tsched_depart_airport_id,\n\t\tscheduled_arrival,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_departure_airport,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TrunkFltType\nLookupToFltNbrRange derive(flight_number = toString(flight_number)) ~> ChgFltNumToString\nUnionCMBandSTDfltnbrs sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FltDataToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Airport_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_airport_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_airport",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_airport",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "AIRPORTDtoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_airport_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AIRPORTblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFAirport": {},
									"AIRPORTtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AIRPORTblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delay_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_Delay_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight_delay",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_delays",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DELAYStoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Delay_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DELAYSblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFDelay": {},
									"DelaysToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DELAYSblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Equip_sched_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_Equip_Sched_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_equip_sched",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_equip_sched",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "EQUIPSCHEDtoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Equip_Sched_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EQUIPSCHEDblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFEquipSched": {},
									"EQUIPSCHEDtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EQUIPSCHEDblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_Flight_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "flight_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['flight_id']"
										}
									},
									{
										"source": {
											"name": "flight_number",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_number']"
										}
									},
									{
										"source": {
											"name": "flight_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['flight_date']"
										}
									},
									{
										"source": {
											"name": "aircraft_registration_number",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_registration_number']"
										}
									},
									{
										"source": {
											"name": "aircraft_type",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_type']"
										}
									},
									{
										"source": {
											"name": "ops_type",
											"type": "String"
										},
										"sink": {
											"path": "$['ops_type']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival']"
										}
									},
									{
										"source": {
											"name": "estimated_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_departure']"
										}
									},
									{
										"source": {
											"name": "estimated_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_arrival']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_out",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_out']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_off",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_off']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_on",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_on']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_in",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_in']"
										}
									},
									{
										"source": {
											"name": "base_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['base_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "base_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['base_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "actual_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_departure_airport']"
										}
									},
									{
										"source": {
											"name": "actual_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "is_verified",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_verified']"
										}
									},
									{
										"source": {
											"name": "notes",
											"type": "String"
										},
										"sink": {
											"path": "$['notes']"
										}
									},
									{
										"source": {
											"name": "is_canceled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_canceled']"
										}
									},
									{
										"source": {
											"name": "flight_type",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_type']"
										}
									},
									{
										"source": {
											"name": "cargo_weight",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_weight']"
										}
									},
									{
										"source": {
											"name": "cargo_on",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_on']"
										}
									},
									{
										"source": {
											"name": "cargo_off",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_off']"
										}
									},
									{
										"source": {
											"name": "fuel_out",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_out']"
										}
									},
									{
										"source": {
											"name": "fuel_in",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_in']"
										}
									},
									{
										"source": {
											"name": "fuel_uplift",
											"type": "Int32"
										},
										"sink": {
											"path": "$['fuel_uplift']"
										}
									},
									{
										"source": {
											"name": "fuel_uplifts",
											"type": "String"
										},
										"sink": {
											"path": "$['fuel_uplifts']"
										}
									},
									{
										"source": {
											"name": "maint_log_page",
											"type": "String"
										},
										"sink": {
											"path": "$['maint_log_page']"
										}
									},
									{
										"source": {
											"name": "lndg_touchdown_zone",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_touchdown_zone']"
										}
									},
									{
										"source": {
											"name": "lndg_midfield",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_midfield']"
										}
									},
									{
										"source": {
											"name": "lndg_rollout",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_rollout']"
										}
									},
									{
										"source": {
											"name": "lndg_actual_braking",
											"type": "String"
										},
										"sink": {
											"path": "$['lndg_actual_braking']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_flights",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "FLIGHTblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Flight_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTSblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FlightToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLIGHTSblobtoSQL')]"
			]
		}
	]
}