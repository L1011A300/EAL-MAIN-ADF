{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "EAL-MAIN-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SQL_USER_CATEGORY_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SF_USER_CATEGORY_PROD"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_USER_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SF_USER_PROD"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_qk2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_main_blob_connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "radixx-source-tcn"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MIS_Choice_paxinfo_TEST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MIS_Choice_paxinfo_test_data_to_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "MIS_Choice_paxinfo_test",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MIS_Choice_paxdata_test_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TCN_COPY_TEST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_qk2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "radixx-source-tcn//"
							},
							{
								"name": "Destination",
								"value": "radixx-destination-tcn//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@pipeline().parameters.windowStart",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().parameters.windowEnd",
										"type": "Expression"
									},
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_qk2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_qk2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String"
					},
					"windowEnd": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_qk2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AIRPORTblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates SF_AIRPORTS_PROD SQL table with data from blob storage.",
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "SFAirport"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_AIRPORT_TABLE",
								"type": "DatasetReference"
							},
							"name": "AIRPORTtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS",
							"description": "Add columns for ADF workflow ID and timestamp."
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFAirport\nSFAirport derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as double,\n\t\tlongitude as double,\n\t\televation_feet as integer,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> AIRPORTtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DELAYSblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates SF_DELAYS_PROD SQL table with data from blob storage.",
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_delays",
								"type": "DatasetReference"
							},
							"name": "SFDelay"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_DELAYS_TABLE",
								"type": "DatasetReference"
							},
							"name": "DelaysToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS",
							"description": "Add columns for ADF workflow ID and timestamp."
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as string,\n\t\tdelay_type as string,\n\t\tduration_mins as string,\n\t\tdelay_code as string,\n\t\tdelay_code_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFDelay\nSFDelay derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tflight_id as integer,\n\t\tdelay_type as string,\n\t\tduration_mins as integer,\n\t\tdelay_code as string,\n\t\tdelay_code_name as string,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DelaysToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DODCntrlblDelayCodes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DOD_CNTRL_DELAY_CSV",
								"type": "DatasetReference"
							},
							"name": "DodCntrlDelay"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_DOD_CNTRLBL_DELAYS_PROD",
								"type": "DatasetReference"
							},
							"name": "DODCntrlDelayToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tdelay_code as string,\n\t\tdelay_code_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DodCntrlDelay\nDodCntrlDelay derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DODCntrlDelayToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EQUIPSCHEDblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates SF_EQUIP_SCHED_PROD SQL table with data from blob storage.",
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_equip_sched",
								"type": "DatasetReference"
							},
							"name": "SFEquipSched"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_EQUIP_SCHED_TABLE",
								"type": "DatasetReference"
							},
							"name": "EQUIPSCHEDtoSQL"
						}
					],
					"transformations": [
						{
							"name": "ADDWrkflwIDandTS",
							"description": "Add columns for ADF workflow ID and timestamp."
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\teqp_sched_id as string,\n\t\tac_registration as string,\n\t\tstatus_code as string,\n\t\tstatus_name as string,\n\t\tstatus_description as string,\n\t\tstart_time as string,\n\t\tend_time as string,\n\t\tnotes as string,\n\t\tis_deleted as boolean,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFEquipSched\nSFEquipSched derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> ADDWrkflwIDandTS\nADDWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\teqp_sched_id as string,\n\t\tac_registration as string,\n\t\tstatus_code as string,\n\t\tstatus_name as string,\n\t\tstatus_description as string,\n\t\tstart_time as timestamp,\n\t\tend_time as timestamp,\n\t\tnotes as string,\n\t\tis_deleted as boolean,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EQUIPSCHEDtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTCREWblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flight_crew",
								"type": "DatasetReference"
							},
							"name": "SFFlightCrew"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_CREW_TABLE",
								"type": "DatasetReference"
							},
							"name": "FLIGHTCREWtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFFlightCrew\nSFFlightCrew derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FLIGHTCREWtoSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTS_OFLblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_OFFLINE_TABLE",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						},
						{
							"name": "AircraftTYPEfilter"
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup"
						},
						{
							"name": "UpdateSchdDepAirportCode"
						},
						{
							"name": "RemoveSchdDepAirportCols"
						},
						{
							"name": "SchdArrAirportLookup"
						},
						{
							"name": "UpdateSchdArrAirportCode"
						},
						{
							"name": "RemoveSchArrAirportCols"
						},
						{
							"name": "RemoveOOOIcolumns"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as string,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as string,\n\t\tcargo_on as string,\n\t\tcargo_off as string,\n\t\tfuel_out as string,\n\t\tfuel_in as string,\n\t\tfuel_uplift as string,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nRemoveOOOIcolumns filter(aircraft_type <=> 'OFL') ~> AircraftTYPEfilter\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nAircraftTYPEfilter, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nAddWrkflwIDandTS select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveOOOIcolumns\nRemoveSchArrAirportCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Uses SF flight blob file with Pax and Mission ID as source. Adds flight category. Creates temp flight number as integer for join to flt nbr range.",
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights_PAX",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix_csv",
								"type": "DatasetReference"
							},
							"name": "FltNbrRangeMatrixCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_TABLE",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS",
							"description": "Adds ADF run ID and timestamp"
						},
						{
							"name": "FLTTYPEfilter",
							"description": "Filters out offline flights"
						},
						{
							"name": "ActualAirportIDifNULL",
							"description": "If actual depart/arrive airport ID is null, populates with sched depart/arrive airport ID."
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled departure airport."
						},
						{
							"name": "UpdateSchdDepAirportCode",
							"description": "Populates sched departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchdDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "SchdArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled arrival airport."
						},
						{
							"name": "UpdateSchdArrAirportCode",
							"description": "Populates sched arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual departure airport."
						},
						{
							"name": "UpdateActDepAirportCode",
							"description": "Populates actual departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual arrival airport."
						},
						{
							"name": "UpdateActArrAirportCode",
							"description": "Populates actual arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table. Changes \"pax\" column to \"SF_Pax\""
						},
						{
							"name": "ConditionalSplit1",
							"description": "Splits flight data into two sets: one with flight numbers beginning with \"CMB\" and another for purely numeric flight numbers."
						},
						{
							"name": "ChangeFltNumToINT",
							"description": "Adds temp \"flight_number_INT\" field to convert flight_number value to integer for join to flt number range matrix (keeping \"flight_number\" as string)."
						},
						{
							"name": "RenameFlightType",
							"description": "Renames \"flight_type\" to \"flt_type\" to avoid duplicate column names with \"FLIGHT_TYPE\" in FltNbrRangeMatrix."
						},
						{
							"name": "ChangeBegEndFltNbrToInt",
							"description": "Converts \"BEGIN_FLT_NBR,\" \"END_FLT_NBR\" to integer for use in join."
						},
						{
							"name": "JoinToFltNbrRangeMatrix",
							"description": "Joins flight data to flight number matrix on flt number and sked dep date to get flight type and subtype."
						},
						{
							"name": "CMBfltnbrRevCat",
							"description": "Assigns \"DOD Int'l\" revenue type to all flight numbers beginning with \"CMB.\""
						},
						{
							"name": "STDfltnbrRevCat",
							"description": "Changes flight data \"flt_type\" to \"flight_type\" and flt number range data \"FLIGHT_TYPE\" to \"REVENUE_TYPE\" and \"FLIGHT_SUBTYPE\" to \"REVENUE_SUBTYPE\". Drops EFF and END dates, BEGIN and END flt number fields from Flight Number Matrix. \"flight_number_INT\" field dropped."
						},
						{
							"name": "UnionCMBandSTDfltnmbrs",
							"description": "Combining rows from transformation 'CMBfltnbrRevCat, and STDfltnbrRevCat'"
						},
						{
							"name": "ChangeDateTimefieldstoTimestamp",
							"description": "Change date/time fields for OOOI, scheduled, estimated arr and dep times from string to timestamp to aid in SQL datatype determination."
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as string,\n\t\tcustomer_name as string,\n\t\tcustomer_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tBEGIN_FLT_NBR as string,\n\t\tEND_FLT_NBR as string,\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrRangeMatrixCSV\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax = pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols split(startsWith(flight_number,'CMB'),\n\tdisjoint: false) ~> ConditionalSplit1@(CMBfltnbr, STDfltnbr)\nConditionalSplit1@STDfltnbr derive(flight_number_INT = toInteger(flight_number)) ~> ChangeFltNumToINT\nChangeFltNumToINT select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflt_type = flight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tflight_number_INT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameFlightType\nFltNbrRangeMatrixCSV derive(BEGIN_FLT_NBR = toInteger(BEGIN_FLT_NBR),\n\t\tEND_FLT_NBR = toInteger(END_FLT_NBR)) ~> ChangeBegEndFltNbrToInt\nRenameFlightType, ChangeBegEndFltNbrToInt join(flight_number_INT >= BEGIN_FLT_NBR\n\t&& flight_number_INT <= END_FLT_NBR\n\t&& scheduled_departure >= EFF_DATE\n\t&& scheduled_departure <= END_DATE,\n\tjoinType:'left',\n\tbroadcast: 'right')~> JoinToFltNbrRangeMatrix\nConditionalSplit1@CMBfltnbr derive(REVENUE_TYPE = \"DOD Int'l\",\n\t\tREVENUE_SUBTYPE = \"International\",\n\t\tFLT_TYPE_OPS_REPORT = \"DOD Int'l\") ~> CMBfltnbrRevCat\nJoinToFltNbrRangeMatrix select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type = flt_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tREVENUE_TYPE = FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> STDfltnbrRevCat\nCMBfltnbrRevCat, STDfltnbrRevCat union(byName: true)~> UnionCMBandSTDfltnmbrs\nUnionCMBandSTDfltnmbrs derive(scheduled_departure = toTimestamp(scheduled_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tscheduled_arrival = toTimestamp(scheduled_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_out = toTimestamp(actual_oooi_out,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_off = toTimestamp(actual_oooi_off,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_on = toTimestamp(actual_oooi_on,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_in = toTimestamp(actual_oooi_in,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_arrival = toTimestamp(estimated_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_departure = toTimestamp(estimated_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tupdated_at = toTimestamp(updated_at,'yyyy-MM-dd HH:mm:ss')) ~> ChangeDateTimefieldstoTimestamp\nChangeDateTimefieldstoTimestamp sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tactual_arrival_airport as string,\n\t\tactual_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_departure_airport as string,\n\t\tactual_oooi_in as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tbase_airport as string,\n\t\tbase_airport_id as string,\n\t\tcargo_off as integer,\n\t\tcargo_on as integer,\n\t\tcargo_weight as integer,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tflight_date as date,\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_type as string,\n\t\tfuel_in as double,\n\t\tfuel_out as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tis_canceled as string,\n\t\tis_verified as string,\n\t\tlndg_actual_braking as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_touchdown_zone as string,\n\t\tmaint_log_page as string,\n\t\tnotes as string,\n\t\tops_type as string,\n\t\tsched_arrive_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tscheduled_arrival as timestamp,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_departure_airport as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQL_PAXMissionIDfltCAT_TEST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Uses SF flight blob file with Pax and Mission ID as source. Adds flight category.",
				"folder": {
					"name": "TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights_PAX",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix_csv",
								"type": "DatasetReference"
							},
							"name": "FltNbrRangeMatrixCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLT_TABLE_TEST",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS",
							"description": "Adds ADF run ID and timestamp"
						},
						{
							"name": "FLTTYPEfilter",
							"description": "Filters out offline flights"
						},
						{
							"name": "ActualAirportIDifNULL",
							"description": "If actual depart/arrive airport ID is null, populates with sched depart/arrive airport ID."
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled departure airport."
						},
						{
							"name": "UpdateSchdDepAirportCode",
							"description": "Populates sched departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchdDepAirportCols"
						},
						{
							"name": "SchdArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled arrival airport."
						},
						{
							"name": "UpdateSchdArrAirportCode",
							"description": "Populates sched arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual departure airport."
						},
						{
							"name": "UpdateActDepAirportCode",
							"description": "Populates actual departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual arrival airport."
						},
						{
							"name": "UpdateActArrAirportCode",
							"description": "Populates actual arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table. Changes \"pax\" column to \"SF_Pax\""
						},
						{
							"name": "ConditionalSplit1",
							"description": "Splits flight data into two sets: one with flight numbers beginning with \"CMB\" and another for purely numeric flight numbers."
						},
						{
							"name": "ChangeFltNumToINT",
							"description": "Changes \"flight_number\" to integer to all for use in join to flight number range matrix."
						},
						{
							"name": "RenameFlightType",
							"description": "Renames \"flight_type\" to \"flt_type\" to avoid duplicate column names with \"FLIGHT_TYPE\" in FltNbrRangeMatrix."
						},
						{
							"name": "ChangeBegEndFltNbrToInt",
							"description": "Converts \"BEGIN_FLT_NBR,\" \"END_FLT_NBR\" to integer for use in join."
						},
						{
							"name": "JoinToFltNbrRangeMatrix",
							"description": "Joins flight data to flight number matrix on flt number and sked dep date to get flight type and subtype."
						},
						{
							"name": "ChgFltNumToString",
							"description": "Changes \"flight_number\" back to string."
						},
						{
							"name": "CMBfltnbrRevCat",
							"description": "Assigns \"DOD Int'l\" revenue type to all flight numbers beginning with \"CMB.\""
						},
						{
							"name": "STDfltnbrRevCat",
							"description": "Changes flight data \"flt_type\" to \"flight_type\" and flt number range data \"FLIGHT_TYPE\" to \"REVENUE_TYPE\". Drops EFF and END dates, BEGIN and END flt number fields from Flight Number Matrix."
						},
						{
							"name": "UnionCMBandSTDfltnmbrs",
							"description": "Combining rows from transformation 'CMBfltnbrRevCat, and STDfltnbrRevCat'"
						},
						{
							"name": "ChangeDateTimefieldstoTimestamp",
							"description": "Change date/time fields for OOOI, scheduled, estimated arr and dep times from string to timestamp to aid in SQL datatype determination."
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tBEGIN_FLT_NBR as string,\n\t\tEND_FLT_NBR as string,\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrRangeMatrixCSV\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax = pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols split(startsWith(flight_number,'CMB'),\n\tdisjoint: false) ~> ConditionalSplit1@(CMBfltnbr, STDfltnbr)\nConditionalSplit1@STDfltnbr derive(flight_number = toInteger(flight_number)) ~> ChangeFltNumToINT\nChangeFltNumToINT select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflt_type = flight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameFlightType\nFltNbrRangeMatrixCSV derive(BEGIN_FLT_NBR = toInteger(BEGIN_FLT_NBR),\n\t\tEND_FLT_NBR = toInteger(END_FLT_NBR)) ~> ChangeBegEndFltNbrToInt\nRenameFlightType, ChangeBegEndFltNbrToInt join(flight_number >= BEGIN_FLT_NBR\n\t&& flight_number <= END_FLT_NBR\n\t&& scheduled_departure >= EFF_DATE\n\t&& scheduled_departure <= END_DATE,\n\tjoinType:'left',\n\tbroadcast: 'right')~> JoinToFltNbrRangeMatrix\nJoinToFltNbrRangeMatrix derive(flight_number = toString(flight_number)) ~> ChgFltNumToString\nConditionalSplit1@CMBfltnbr derive(REVENUE_TYPE = \"DOD Int'l\",\n\t\tREVENUE_SUBTYPE = \"International\",\n\t\tFLT_TYPE_OPS_REPORT = \"DOD\") ~> CMBfltnbrRevCat\nChgFltNumToString select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type = flt_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tREVENUE_TYPE = FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> STDfltnbrRevCat\nCMBfltnbrRevCat, STDfltnbrRevCat union(byName: true)~> UnionCMBandSTDfltnmbrs\nUnionCMBandSTDfltnmbrs derive(scheduled_departure = toTimestamp(scheduled_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tscheduled_arrival = toTimestamp(scheduled_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_out = toTimestamp(actual_oooi_out,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_off = toTimestamp(actual_oooi_off,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_on = toTimestamp(actual_oooi_on,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_in = toTimestamp(actual_oooi_in,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_arrival = toTimestamp(estimated_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_departure = toTimestamp(estimated_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tupdated_at = toTimestamp(updated_at,'yyyy-MM-dd HH:mm:ss')) ~> ChangeDateTimefieldstoTimestamp\nChangeDateTimefieldstoTimestamp sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as date,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_arrival as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_in as timestamp,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as string,\n\t\tnotes as string,\n\t\tis_canceled as string,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQL_PAX_TEST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Uses SF flight blob file with Pax and Mission ID as source",
				"folder": {
					"name": "TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights_PAX",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLT_TABLE_TEST",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS",
							"description": "Adds ADF run ID and timestamp"
						},
						{
							"name": "FLTTYPEfilter",
							"description": "Filters out offline flights"
						},
						{
							"name": "ActualAirportIDifNULL",
							"description": "If actual depart/arrive airport ID is null, populates with sched depart/arrive airport ID."
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled departure airport."
						},
						{
							"name": "UpdateSchdDepAirportCode",
							"description": "Populates sched departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchdDepAirportCols"
						},
						{
							"name": "SchdArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled arrival airport."
						},
						{
							"name": "UpdateSchdArrAirportCode",
							"description": "Populates sched arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual departure airport."
						},
						{
							"name": "UpdateActDepAirportCode",
							"description": "Populates actual departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual arrival airport."
						},
						{
							"name": "UpdateActArrAirportCode",
							"description": "Populates actual arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table. Changes \"pax\" column to \"SF_Pax\""
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax = pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as date,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_arrival as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_in as timestamp,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as string,\n\t\tnotes as string,\n\t\tis_canceled as string,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQL_TEST_Cust')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Uses SF flight blob file with Pax and Mission ID as source. Adds flight category. Creates temp flight number as integer for join to flt nbr range.",
				"folder": {
					"name": "TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights_TEST",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix_csv",
								"type": "DatasetReference"
							},
							"name": "FltNbrRangeMatrixCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLT_TABLE_TEST",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS",
							"description": "Adds ADF run ID and timestamp"
						},
						{
							"name": "FLTTYPEfilter",
							"description": "Filters out offline flights"
						},
						{
							"name": "ActualAirportIDifNULL",
							"description": "If actual depart/arrive airport ID is null, populates with sched depart/arrive airport ID."
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled departure airport."
						},
						{
							"name": "UpdateSchdDepAirportCode",
							"description": "Populates sched departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchdDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "SchdArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled arrival airport."
						},
						{
							"name": "UpdateSchdArrAirportCode",
							"description": "Populates sched arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual departure airport."
						},
						{
							"name": "UpdateActDepAirportCode",
							"description": "Populates actual departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual arrival airport."
						},
						{
							"name": "UpdateActArrAirportCode",
							"description": "Populates actual arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table. Changes \"pax\" column to \"SF_Pax\""
						},
						{
							"name": "ConditionalSplit1",
							"description": "Splits flight data into two sets: one with flight numbers beginning with \"CMB\" and another for purely numeric flight numbers."
						},
						{
							"name": "ChangeFltNumToINT",
							"description": "Adds temp \"flight_number_INT\" field to convert flight_number value to integer for join to flt number range matrix (keeping \"flight_number\" as string)."
						},
						{
							"name": "RenameFlightType",
							"description": "Renames \"flight_type\" to \"flt_type\" to avoid duplicate column names with \"FLIGHT_TYPE\" in FltNbrRangeMatrix."
						},
						{
							"name": "ChangeBegEndFltNbrToInt",
							"description": "Converts \"BEGIN_FLT_NBR,\" \"END_FLT_NBR\" to integer for use in join."
						},
						{
							"name": "JoinToFltNbrRangeMatrix",
							"description": "Joins flight data to flight number matrix on flt number and sked dep date to get flight type and subtype."
						},
						{
							"name": "CMBfltnbrRevCat",
							"description": "Assigns \"DOD Int'l\" revenue type to all flight numbers beginning with \"CMB.\""
						},
						{
							"name": "STDfltnbrRevCat",
							"description": "Changes flight data \"flt_type\" to \"flight_type\" and flt number range data \"FLIGHT_TYPE\" to \"REVENUE_TYPE\" and \"FLIGHT_SUBTYPE\" to \"REVENUE_SUBTYPE\". Drops EFF and END dates, BEGIN and END flt number fields from Flight Number Matrix. \"flight_number_INT\" field dropped."
						},
						{
							"name": "UnionCMBandSTDfltnmbrs",
							"description": "Combining rows from transformation 'CMBfltnbrRevCat, and STDfltnbrRevCat'"
						},
						{
							"name": "ChangeDateTimefieldstoTimestamp",
							"description": "Change date/time fields for OOOI, scheduled, estimated arr and dep times from string to timestamp to aid in SQL datatype determination."
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as string,\n\t\tcustomer_name as string,\n\t\tcustomer_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tBEGIN_FLT_NBR as string,\n\t\tEND_FLT_NBR as string,\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrRangeMatrixCSV\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax = pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols split(startsWith(flight_number,'CMB'),\n\tdisjoint: false) ~> ConditionalSplit1@(CMBfltnbr, STDfltnbr)\nConditionalSplit1@STDfltnbr derive(flight_number_INT = toInteger(flight_number)) ~> ChangeFltNumToINT\nChangeFltNumToINT select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflt_type = flight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tflight_number_INT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameFlightType\nFltNbrRangeMatrixCSV derive(BEGIN_FLT_NBR = toInteger(BEGIN_FLT_NBR),\n\t\tEND_FLT_NBR = toInteger(END_FLT_NBR)) ~> ChangeBegEndFltNbrToInt\nRenameFlightType, ChangeBegEndFltNbrToInt join(flight_number_INT >= BEGIN_FLT_NBR\n\t&& flight_number_INT <= END_FLT_NBR\n\t&& scheduled_departure >= EFF_DATE\n\t&& scheduled_departure <= END_DATE,\n\tjoinType:'left',\n\tbroadcast: 'right')~> JoinToFltNbrRangeMatrix\nConditionalSplit1@CMBfltnbr derive(REVENUE_TYPE = \"DOD Int'l\",\n\t\tREVENUE_SUBTYPE = \"International\",\n\t\tFLT_TYPE_OPS_REPORT = \"DOD Int'l\") ~> CMBfltnbrRevCat\nJoinToFltNbrRangeMatrix select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type = flt_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tREVENUE_TYPE = FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> STDfltnbrRevCat\nCMBfltnbrRevCat, STDfltnbrRevCat union(byName: true)~> UnionCMBandSTDfltnmbrs\nUnionCMBandSTDfltnmbrs derive(scheduled_departure = toTimestamp(scheduled_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tscheduled_arrival = toTimestamp(scheduled_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_out = toTimestamp(actual_oooi_out,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_off = toTimestamp(actual_oooi_off,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_on = toTimestamp(actual_oooi_on,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_in = toTimestamp(actual_oooi_in,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_arrival = toTimestamp(estimated_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_departure = toTimestamp(estimated_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tupdated_at = toTimestamp(updated_at,'yyyy-MM-dd HH:mm:ss')) ~> ChangeDateTimefieldstoTimestamp\nChangeDateTimefieldstoTimestamp sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as date,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_arrival as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_in as timestamp,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as string,\n\t\tnotes as string,\n\t\tis_canceled as string,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQL_incr_base')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Uses SF flight blob file with Pax and Mission ID as source. Adds flight category. Creates temp flight number as integer for join to flt nbr range.",
				"folder": {
					"name": "TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights_PAX",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix_csv",
								"type": "DatasetReference"
							},
							"name": "FltNbrRangeMatrixCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLT_TABLE_TEST",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS",
							"description": "Adds ADF run ID and timestamp"
						},
						{
							"name": "FLTTYPEfilter",
							"description": "Filters out offline flights"
						},
						{
							"name": "ActualAirportIDifNULL",
							"description": "If actual depart/arrive airport ID is null, populates with sched depart/arrive airport ID."
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled departure airport."
						},
						{
							"name": "UpdateSchdDepAirportCode",
							"description": "Populates sched departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchdDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "SchdArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled arrival airport."
						},
						{
							"name": "UpdateSchdArrAirportCode",
							"description": "Populates sched arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual departure airport."
						},
						{
							"name": "UpdateActDepAirportCode",
							"description": "Populates actual departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual arrival airport."
						},
						{
							"name": "UpdateActArrAirportCode",
							"description": "Populates actual arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table. Changes \"pax\" column to \"SF_Pax\""
						},
						{
							"name": "ConditionalSplit1",
							"description": "Splits flight data into two sets: one with flight numbers beginning with \"CMB\" and another for purely numeric flight numbers."
						},
						{
							"name": "ChangeFltNumToINT",
							"description": "Adds temp \"flight_number_INT\" field to convert flight_number value to integer for join to flt number range matrix (keeping \"flight_number\" as string)."
						},
						{
							"name": "RenameFlightType",
							"description": "Renames \"flight_type\" to \"flt_type\" to avoid duplicate column names with \"FLIGHT_TYPE\" in FltNbrRangeMatrix."
						},
						{
							"name": "ChangeBegEndFltNbrToInt",
							"description": "Converts \"BEGIN_FLT_NBR,\" \"END_FLT_NBR\" to integer for use in join."
						},
						{
							"name": "JoinToFltNbrRangeMatrix",
							"description": "Joins flight data to flight number matrix on flt number and sked dep date to get flight type and subtype."
						},
						{
							"name": "CMBfltnbrRevCat",
							"description": "Assigns \"DOD Int'l\" revenue type to all flight numbers beginning with \"CMB.\""
						},
						{
							"name": "STDfltnbrRevCat",
							"description": "Changes flight data \"flt_type\" to \"flight_type\" and flt number range data \"FLIGHT_TYPE\" to \"REVENUE_TYPE\" and \"FLIGHT_SUBTYPE\" to \"REVENUE_SUBTYPE\". Drops EFF and END dates, BEGIN and END flt number fields from Flight Number Matrix. \"flight_number_INT\" field dropped."
						},
						{
							"name": "UnionCMBandSTDfltnmbrs",
							"description": "Combining rows from transformation 'CMBfltnbrRevCat, and STDfltnbrRevCat'"
						},
						{
							"name": "ChangeDateTimefieldstoTimestamp",
							"description": "Change date/time fields for OOOI, scheduled, estimated arr and dep times from string to timestamp to aid in SQL datatype determination."
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as integer,\n\t\tsched_depart_airport_id as integer,\n\t\tsched_arrive_airport_id as integer,\n\t\tactual_depart_airport_id as integer,\n\t\tactual_arrive_airport_id as integer,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as string,\n\t\tcargo_off as string,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as string,\n\t\tcustomer_name as string,\n\t\tcustomer_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as integer,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tBEGIN_FLT_NBR as string,\n\t\tEND_FLT_NBR as string,\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrRangeMatrixCSV\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax = pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols split(startsWith(flight_number,'CMB'),\n\tdisjoint: false) ~> ConditionalSplit1@(CMBfltnbr, STDfltnbr)\nConditionalSplit1@STDfltnbr derive(flight_number_INT = toInteger(flight_number)) ~> ChangeFltNumToINT\nChangeFltNumToINT select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflt_type = flight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tflight_number_INT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameFlightType\nFltNbrRangeMatrixCSV derive(BEGIN_FLT_NBR = toInteger(BEGIN_FLT_NBR),\n\t\tEND_FLT_NBR = toInteger(END_FLT_NBR)) ~> ChangeBegEndFltNbrToInt\nRenameFlightType, ChangeBegEndFltNbrToInt join(flight_number_INT >= BEGIN_FLT_NBR\n\t&& flight_number_INT <= END_FLT_NBR\n\t&& scheduled_departure >= EFF_DATE\n\t&& scheduled_departure <= END_DATE,\n\tjoinType:'left',\n\tbroadcast: 'right')~> JoinToFltNbrRangeMatrix\nConditionalSplit1@CMBfltnbr derive(REVENUE_TYPE = \"DOD Int'l\",\n\t\tREVENUE_SUBTYPE = \"International\",\n\t\tFLT_TYPE_OPS_REPORT = \"DOD Int'l\") ~> CMBfltnbrRevCat\nJoinToFltNbrRangeMatrix select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type = flt_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tREVENUE_TYPE = FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> STDfltnbrRevCat\nCMBfltnbrRevCat, STDfltnbrRevCat union(byName: true)~> UnionCMBandSTDfltnmbrs\nUnionCMBandSTDfltnmbrs derive(scheduled_departure = toTimestamp(scheduled_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tscheduled_arrival = toTimestamp(scheduled_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_out = toTimestamp(actual_oooi_out,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_off = toTimestamp(actual_oooi_off,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_on = toTimestamp(actual_oooi_on,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_in = toTimestamp(actual_oooi_in,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_arrival = toTimestamp(estimated_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_departure = toTimestamp(estimated_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tupdated_at = toTimestamp(updated_at,'yyyy-MM-dd HH:mm:ss')) ~> ChangeDateTimefieldstoTimestamp\nChangeDateTimefieldstoTimestamp sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as date,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_arrival as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_in as timestamp,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as string,\n\t\tnotes as string,\n\t\tis_canceled as string,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQL_incr_update')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Uses SF flight blob file with Pax and Mission ID as source. Adds flight category. Creates temp flight number as integer for join to flt nbr range.",
				"folder": {
					"name": "TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights_PAX",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						},
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix_csv",
								"type": "DatasetReference"
							},
							"name": "FltNbrRangeMatrixCSV"
						},
						{
							"dataset": {
								"referenceName": "SQL_FLT_TABLE_TEST",
								"type": "DatasetReference"
							},
							"name": "SQLFLTTABLETESTPREV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLT_TABLE_TEST",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS",
							"description": "Adds ADF run ID and timestamp"
						},
						{
							"name": "FLTTYPEfilter",
							"description": "Filters out offline flights"
						},
						{
							"name": "ActualAirportIDifNULL",
							"description": "If actual depart/arrive airport ID is null, populates with sched depart/arrive airport ID."
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled departure airport."
						},
						{
							"name": "UpdateSchdDepAirportCode",
							"description": "Populates sched departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchdDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "SchdArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled arrival airport."
						},
						{
							"name": "UpdateSchdArrAirportCode",
							"description": "Populates sched arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual departure airport."
						},
						{
							"name": "UpdateActDepAirportCode",
							"description": "Populates actual departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual arrival airport."
						},
						{
							"name": "UpdateActArrAirportCode",
							"description": "Populates actual arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table. Changes \"pax\" column to \"SF_Pax\""
						},
						{
							"name": "ConditionalSplit1",
							"description": "Splits flight data into two sets: one with flight numbers beginning with \"CMB\" and another for purely numeric flight numbers."
						},
						{
							"name": "ChangeFltNumToINT",
							"description": "Adds temp \"flight_number_INT\" field to convert flight_number value to integer for join to flt number range matrix (keeping \"flight_number\" as string)."
						},
						{
							"name": "RenameFlightType",
							"description": "Renames \"flight_type\" to \"flt_type\" to avoid duplicate column names with \"FLIGHT_TYPE\" in FltNbrRangeMatrix."
						},
						{
							"name": "ChangeBegEndFltNbrToInt",
							"description": "Converts \"BEGIN_FLT_NBR,\" \"END_FLT_NBR\" to integer for use in join."
						},
						{
							"name": "JoinToFltNbrRangeMatrix",
							"description": "Joins flight data to flight number matrix on flt number and sked dep date to get flight type and subtype."
						},
						{
							"name": "CMBfltnbrRevCat",
							"description": "Assigns \"DOD Int'l\" revenue type to all flight numbers beginning with \"CMB.\""
						},
						{
							"name": "STDfltnbrRevCat",
							"description": "Changes flight data \"flt_type\" to \"flight_type\" and flt number range data \"FLIGHT_TYPE\" to \"REVENUE_TYPE\" and \"FLIGHT_SUBTYPE\" to \"REVENUE_SUBTYPE\". Drops EFF and END dates, BEGIN and END flt number fields from Flight Number Matrix. \"flight_number_INT\" field dropped."
						},
						{
							"name": "UnionCMBandSTDfltnmbrs",
							"description": "Combining rows from transformation 'CMBfltnbrRevCat, and STDfltnbrRevCat'"
						},
						{
							"name": "ChangeDateTimefieldstoTimestamp",
							"description": "Change date/time fields for OOOI, scheduled, estimated arr and dep times from string to timestamp to aid in SQL datatype determination."
						},
						{
							"name": "alterRow1"
						}
					],
					"script": "parameters{\n\trun_id as string,\n\tlastADFTS as timestamp\n}\nsource(output(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as string,\n\t\tcustomer_name as string,\n\t\tcustomer_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tBEGIN_FLT_NBR as string,\n\t\tEND_FLT_NBR as string,\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrRangeMatrixCSV\nsource(output(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as date,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_arrival as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_in as timestamp,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as string,\n\t\tnotes as string,\n\t\tis_canceled as string,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SQLFLTTABLETESTPREV\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tpax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax = pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols split(startsWith(flight_number,'CMB'),\n\tdisjoint: false) ~> ConditionalSplit1@(CMBfltnbr, STDfltnbr)\nConditionalSplit1@STDfltnbr derive(flight_number_INT = toInteger(flight_number)) ~> ChangeFltNumToINT\nChangeFltNumToINT select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflt_type = flight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tflight_number_INT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameFlightType\nFltNbrRangeMatrixCSV derive(BEGIN_FLT_NBR = toInteger(BEGIN_FLT_NBR),\n\t\tEND_FLT_NBR = toInteger(END_FLT_NBR)) ~> ChangeBegEndFltNbrToInt\nRenameFlightType, ChangeBegEndFltNbrToInt join(flight_number_INT >= BEGIN_FLT_NBR\n\t&& flight_number_INT <= END_FLT_NBR\n\t&& scheduled_departure >= EFF_DATE\n\t&& scheduled_departure <= END_DATE,\n\tjoinType:'left',\n\tbroadcast: 'right')~> JoinToFltNbrRangeMatrix\nConditionalSplit1@CMBfltnbr derive(REVENUE_TYPE = \"DOD Int'l\",\n\t\tREVENUE_SUBTYPE = \"International\",\n\t\tFLT_TYPE_OPS_REPORT = \"DOD Int'l\") ~> CMBfltnbrRevCat\nJoinToFltNbrRangeMatrix select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type = flt_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tSF_pax,\n\t\tmission_id,\n\t\tupdated_at,\n\t\tcustomer_name,\n\t\tcustomer_code,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID,\n\t\tREVENUE_TYPE = FLIGHT_TYPE,\n\t\tREVENUE_SUBTYPE = FLIGHT_SUBTYPE,\n\t\tFLT_TYPE_OPS_REPORT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> STDfltnbrRevCat\nCMBfltnbrRevCat, STDfltnbrRevCat union(byName: true)~> UnionCMBandSTDfltnmbrs\nUnionCMBandSTDfltnmbrs derive(scheduled_departure = toTimestamp(scheduled_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tscheduled_arrival = toTimestamp(scheduled_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_out = toTimestamp(actual_oooi_out,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_off = toTimestamp(actual_oooi_off,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_on = toTimestamp(actual_oooi_on,'yyyy-MM-dd HH:mm:ss'),\n\t\tactual_oooi_in = toTimestamp(actual_oooi_in,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_arrival = toTimestamp(estimated_arrival,'yyyy-MM-dd HH:mm:ss'),\n\t\testimated_departure = toTimestamp(estimated_departure,'yyyy-MM-dd HH:mm:ss'),\n\t\tupdated_at = toTimestamp(updated_at,'yyyy-MM-dd HH:mm:ss')) ~> ChangeDateTimefieldstoTimestamp\nChangeDateTimefieldstoTimestamp alterRow(upsertIf(updated_at>$lastADFTS)) ~> alterRow1\nalterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as date,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_arrival as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_in as timestamp,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as string,\n\t\tnotes as string,\n\t\tis_canceled as string,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tpax as integer,\n\t\tmission_id as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['flight_id'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQLdeprecated112221')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Populates SF_FLIGHT_PROD SQL table with data from blob storage.",
				"folder": {
					"name": "Inactive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_TABLE",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS",
							"description": "Add columns for ADF workflow ID and timestamp."
						},
						{
							"name": "FLTTYPEfilter",
							"description": "Filters out offline flights."
						},
						{
							"name": "ActualAirportIDifNULL",
							"description": "If actual depart/arrive airport ID is null, populates with sched depart/arrive airport ID."
						},
						{
							"name": "PareAirportReference",
							"description": "Removes unnecessary columns from airport reference data."
						},
						{
							"name": "SchdDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled departure airport."
						},
						{
							"name": "UpdateSchdDepAirportCode",
							"description": "Populates sched departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchdDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "SchdArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for scheduled arrival airport."
						},
						{
							"name": "UpdateSchdArrAirportCode",
							"description": "Populates sched arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveSchArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActDepAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual departure airport."
						},
						{
							"name": "UpdateActDepAirportCode",
							"description": "Populates actual departure airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActDepAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						},
						{
							"name": "ActArrAirportLookup",
							"description": "Looks up IATA, ICAO and FAA airport codes for actual arrival airport."
						},
						{
							"name": "UpdateActArrAirportCode",
							"description": "Populates actual arrival airport code with IATA, ICAO or FAA code (whichever is available first)."
						},
						{
							"name": "RemoveActArrAirportCols",
							"description": "Removes unneeded lookup columns inserted from airport reference table."
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as integer,\n\t\tcargo_on as integer,\n\t\tcargo_off as integer,\n\t\tfuel_out as double,\n\t\tfuel_in as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tactual_arrival_airport as string,\n\t\tactual_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_departure_airport as string,\n\t\tactual_oooi_in as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tbase_airport as string,\n\t\tbase_airport_id as string,\n\t\tcargo_off as integer,\n\t\tcargo_on as integer,\n\t\tcargo_weight as integer,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tflight_date as date,\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_type as string,\n\t\tfuel_in as double,\n\t\tfuel_out as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tis_canceled as string,\n\t\tis_verified as string,\n\t\tlndg_actual_braking as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_touchdown_zone as string,\n\t\tmaint_log_page as string,\n\t\tnotes as string,\n\t\tops_type as string,\n\t\tsched_arrive_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tscheduled_arrival as timestamp,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_departure_airport as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FltNbrRangeMatrixBlobToSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Flt_nbr_range_matrix_csv",
								"type": "DatasetReference"
							},
							"name": "FltNbrMatrix"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FLT_NBR_RANGE_PROD",
								"type": "DatasetReference"
							},
							"name": "FltNbrMatrixToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tEFF_DATE as string,\n\t\tEND_DATE as string,\n\t\tBEGIN_FLT_NBR as string,\n\t\tEND_FLT_NBR as string,\n\t\tFLIGHT_TYPE as string,\n\t\tFLIGHT_SUBTYPE as string,\n\t\tFLT_TYPE_OPS_REPORT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FltNbrMatrix\nFltNbrMatrix derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FltNbrMatrixToSQL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MIS_Choice_Pax_Bags_to_SQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MIS_Choice_Pax_Bags",
								"type": "DatasetReference"
							},
							"name": "MISChoicePaxBagsBlob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_MIS_CHOICE_PAX_BAGS_TABLE",
								"type": "DatasetReference"
							},
							"name": "MISCHOICEPAXBAGSSQL"
						}
					],
					"transformations": [
						{
							"name": "PareMISData"
						},
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\tRunId as string\n}\nsource(output(\n\t\tFlight as (ID as string, SegmentNo as integer, ExternalID as string, CarrierCode as string, FlightNo as string, MarketingCarrierCode as string, MarketingFlightNo as string, Type as string, TailNo as string, OriginIATA as string, OriginICAO as string, OriginAirportName as string, OriginAirportCity as string, OriginAirportCountryCode as string, DepartureTerminal as string, DepartureGate as string, DestinationIATA as string, DestinationICAO as string, DestinationAirportName as string, DestinationAirportCity as string, DestinationAirportCountryCode as string, ArrivalTerminal as string, ArrivalGate as string, ScheduledDepartureTime as string, ScheduledDepartureTimeUTC as string, EstimatedDepartureTime as string, ScheduledArrivalTime as string, EstimatedArrivalTime as string, BoardingTime as string, Message as string, Status as string, EnablePassengerAPIS as boolean, EnableCrewAPIS as boolean, EnableDCS as boolean, WeightUnitsKgs as boolean, IsOpenSeating as boolean, IsProgressiveFlight as boolean, EnableThroughCheckIn as boolean, EnableIatciCheckIn as boolean, EnableBoarding as boolean, UseAveragePaxWeight as boolean, UseAverageBagWeight as boolean, PnlImported as boolean, IsCancelled as boolean, CancelledBy as string, CancelledReason as string, IsLocked as boolean, LockedBy as string, LockedReason as string, AircraftCapacity as integer, BookedPassengersCount as integer, TotalCargoLoad as integer, UpliftFuelLoad as integer, TotalFuelLoad as integer, RemainingFuelLoad as integer, Carrier as (CarrierName as string, Code as string, IATA as string, ICAO as string, ApisCarrierCode as string, IataMessagingCode as string, Prefix as string, Address as (ID as string, Location as string, Street1 as string, Street2 as string, City as string, StateCode as string, PostalCode as string, CountryCode as string, CustomData as (Properties as ({} as string))), Email as string, Website as string, Logo as string, Icon as string, DefaultFlightType as integer, DefaultIsTestEnvironment as boolean, DefaultIsOpenSeating as boolean, DefaultIsEnableBSMs as boolean, DefaultIsProgressiveFlight as boolean, DefaultEnableThroughCheckIn as boolean, DefaultEnableIatciCheckIn as boolean, DefaultDomesticBoardingTime as integer, DefaultInternationalBoardingTime as integer, DefaultWeightUnitsKgs as boolean, DefaultUseAveragePaxWeight as boolean, DefaultUseAverageBagWeight as boolean, DefaultAdultAge as integer, DefaultAverageAdultMaleWeight as integer, DefaultAverageAdultFemaleWeight as integer, DefaultChildAge as integer, SeatMapChildAge as integer, DefaultAverageChildWeight as integer, DefaultPassengerPaddedWeight as integer, HeavyBagAverageWeight as integer, HeavyBagThresholdWeight as integer, LifBagWeightCoefficientType as integer, LifBagAverageWeight as double, DefaultCurrencyCode as string, CurrencyConversionRounding as integer, ApisSenderID as string, ApisContactName as string, ApisTelephone as string, ApisFax as string, ApisEmail as string, TsaPreCheck as boolean, PnlImportCloseTime as integer, AdlImportCloseTime as integer, PermanentlyDeleteCancelledReservationsOnManifestImport as boolean, DefaultResidenceToNationalityOnManifestImport as boolean, IncludePassengerIdElementOnIataMessages as boolean, PrintFlightMessageOnBP as boolean, PrintOperatedByOnBP as boolean, PrintSSRsOnBP as boolean, PrintDocsOkForVerifiedPassengersOnBP as boolean, PrintReturnConnectingFlightBP as boolean, PrintBagWeightOnBT as boolean, IsPrintingBagTagWithoutCheckInAllowed as boolean, AllowBagsWithNoWeight as boolean, AllowPermanentDeleteNonPrintedBags as boolean, MaximumPassengerBags as integer, EmergencySeatInstructions as string, PremiumSeatInstructions as string, EmergencySeatGateStopInstructions as string, SelecteeGateStopInstructions as string, UnverifiedDocumentsGateStopInstructions as string, WatchlistNoFlyMatchInstructions as string, WatchlistPreventMatchInstructions as string, WatchlistSelecteeMatchInstructions as string, EmailSenderAddress as string, IsBoardingPassPrintWithUnpaidAncillariesAllowed as boolean, CustomData as (Properties as ({} as string))), AncillaryTemplateID as string, CustomerID as string, ApiInterfaceIDs as string, BatchPassengerMask as string, BatchCrewMemberMask as string, PreDepartureCloseOutPassengerMask as string, PostDepartureCloseOutPassengerMask as string, PreDepartureCloseOutCrewMemberMask as string, PostDepartureCloseOutCrewMemberMask as string, PaxFlightPreDepartureCloseOutStatus as string, PaxFlightPostDepartureCloseOutStatus as string, CrewFlightPreDepartureCloseOutStatus as string, CrewFlightPostDepartureCloseOutStatus as string, PaxBatchPreVetStatus as string, HasPassengerSecurityTransactions as boolean, HealthCheckRule as (ID as string, CarrierCode as string, OriginCountryEntity as string, DestinationCountryEntity as string, OriginAirport as string, DestinationAirport as string, Instructions as string, IsClearToBoard as boolean, IsRequirePassengerAttestation as boolean, AttestationMinorStartAge as integer, AttestationMinorEndAge as integer, IsRequireProofForRemoteCheckIn as boolean, IsRequireRemarksForFailStatus as boolean, IsActive as boolean, CreatedBy as string, CreatedTimestampUTC as string, UpdatedBy as string), IsNotificationAlertsOptional as boolean, IsContactTracingOptional as boolean, IsHealthCheckVerificationOptional as boolean, IsHealthCheckAttestationOptional as boolean, IsTestEnvironment as boolean, CheckedInPassengersCount as integer, CheckedBagsCount as integer, CustomData as (Properties as ({} as string))),\n\t\tSuccess as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> MISChoicePaxBagsBlob\nMISChoicePaxBagsBlob select(mapColumn(\n\t\tID = Flight.ID,\n\t\tSegmentNo = Flight.SegmentNo,\n\t\tExternalID = Flight.ExternalID,\n\t\tFlightNo = Flight.FlightNo,\n\t\tType = Flight.Type,\n\t\tTailNo = Flight.TailNo,\n\t\tOriginIATA = Flight.OriginIATA,\n\t\tDestinationIATA = Flight.DestinationIATA,\n\t\tScheduledDepartureTimeUTC = Flight.ScheduledDepartureTimeUTC,\n\t\tStatus = Flight.Status,\n\t\tCheckedInPassengersCount = Flight.CheckedInPassengersCount,\n\t\tCheckedBagsCount = Flight.CheckedBagsCount,\n\t\tBookedPassengersCount = Flight.BookedPassengersCount\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareMISData\nPareMISData derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $RunId) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> MISCHOICEPAXBAGSSQL"
				}
			},
			"dependsOn": []
		}
	]
}