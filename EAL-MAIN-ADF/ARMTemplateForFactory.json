{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "EAL-MAIN-ADF"
		},
		"SkedFlexConnection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SkedFlexConnection'"
		},
		"eal_edw_connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eal_edw_connection'"
		},
		"eal_main_blob_connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eal_main_blob_connection'"
		},
		"eal_staging_connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eal_staging_connection'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Airport_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_airport_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_airport",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_airport",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "AIRPORTDtoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_airport_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AIRPORTblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFAirport": {},
									"AIRPORTtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_bi_airport')]",
				"[concat(variables('factoryId'), '/datasets/SF_source_airport')]",
				"[concat(variables('factoryId'), '/dataflows/AIRPORTblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delay_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_Delay_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight_delay",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_delays",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DELAYStoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Delay_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DELAYSblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFDelay": {},
									"DelaysToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_bi_flight_delay')]",
				"[concat(variables('factoryId'), '/datasets/SF_source_delays')]",
				"[concat(variables('factoryId'), '/dataflows/DELAYSblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Equip_sched_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_Equip_Sched_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_equip_sched",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_equip_sched",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "EQUIPSCHEDtoblobSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Equip_Sched_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EQUIPSCHEDblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFEquipSched": {},
									"EQUIPSCHEDtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T17:18:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_bi_equip_sched')]",
				"[concat(variables('factoryId'), '/datasets/SF_source_equip_sched')]",
				"[concat(variables('factoryId'), '/dataflows/EQUIPSCHEDblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF_Flight_data_to_Azure_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "flight_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['flight_id']"
										}
									},
									{
										"source": {
											"name": "flight_number",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_number']"
										}
									},
									{
										"source": {
											"name": "flight_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['flight_date']"
										}
									},
									{
										"source": {
											"name": "aircraft_registration_number",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_registration_number']"
										}
									},
									{
										"source": {
											"name": "aircraft_type",
											"type": "String"
										},
										"sink": {
											"path": "$['aircraft_type']"
										}
									},
									{
										"source": {
											"name": "ops_type",
											"type": "String"
										},
										"sink": {
											"path": "$['ops_type']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival']"
										}
									},
									{
										"source": {
											"name": "estimated_departure",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_departure']"
										}
									},
									{
										"source": {
											"name": "estimated_arrival",
											"type": "String"
										},
										"sink": {
											"path": "$['estimated_arrival']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_out",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_out']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_off",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_off']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_on",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_on']"
										}
									},
									{
										"source": {
											"name": "actual_oooi_in",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_oooi_in']"
										}
									},
									{
										"source": {
											"name": "base_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['base_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "sched_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['sched_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_depart_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_depart_airport_id']"
										}
									},
									{
										"source": {
											"name": "actual_arrive_airport_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['actual_arrive_airport_id']"
										}
									},
									{
										"source": {
											"name": "base_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['base_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_departure_airport']"
										}
									},
									{
										"source": {
											"name": "scheduled_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['scheduled_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "actual_departure_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_departure_airport']"
										}
									},
									{
										"source": {
											"name": "actual_arrival_airport",
											"type": "String"
										},
										"sink": {
											"path": "$['actual_arrival_airport']"
										}
									},
									{
										"source": {
											"name": "is_verified",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_verified']"
										}
									},
									{
										"source": {
											"name": "notes",
											"type": "String"
										},
										"sink": {
											"path": "$['notes']"
										}
									},
									{
										"source": {
											"name": "is_canceled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_canceled']"
										}
									},
									{
										"source": {
											"name": "flight_type",
											"type": "String"
										},
										"sink": {
											"path": "$['flight_type']"
										}
									},
									{
										"source": {
											"name": "cargo_weight",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_weight']"
										}
									},
									{
										"source": {
											"name": "cargo_on",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_on']"
										}
									},
									{
										"source": {
											"name": "cargo_off",
											"type": "Int32"
										},
										"sink": {
											"path": "$['cargo_off']"
										}
									},
									{
										"source": {
											"name": "fuel_out",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_out']"
										}
									},
									{
										"source": {
											"name": "fuel_in",
											"type": "Decimal"
										},
										"sink": {
											"path": "$['fuel_in']"
										}
									},
									{
										"source": {
											"name": "fuel_uplift",
											"type": "Int32"
										},
										"sink": {
											"path": "$['fuel_uplift']"
										}
									},
									{
										"source": {
											"name": "fuel_uplifts",
											"type": "String"
										},
										"sink": {
											"path": "$['fuel_uplifts']"
										}
									},
									{
										"source": {
											"name": "maint_log_page",
											"type": "String"
										},
										"sink": {
											"path": "$['maint_log_page']"
										}
									},
									{
										"source": {
											"name": "lndg_touchdown_zone",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_touchdown_zone']"
										}
									},
									{
										"source": {
											"name": "lndg_midfield",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_midfield']"
										}
									},
									{
										"source": {
											"name": "lndg_rollout",
											"type": "Int32"
										},
										"sink": {
											"path": "$['lndg_rollout']"
										}
									},
									{
										"source": {
											"name": "lndg_actual_braking",
											"type": "String"
										},
										"sink": {
											"path": "$['lndg_actual_braking']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_flight",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_flights",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "FLIGHTblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF_Flight_data_to_Azure_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTSblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FlightToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_bi_flight')]",
				"[concat(variables('factoryId'), '/datasets/SF_source_flights')]",
				"[concat(variables('factoryId'), '/dataflows/FLIGHTSblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flight_offline_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FLIGHTOFLblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLIGHTS_OFLblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFFlight": {},
									"AirportReferenceJSON": {},
									"FlightToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-14T16:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLIGHTS_OFLblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pairing_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF user data to Azure blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "pairing_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['pairing_id']"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['user_id']"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "String"
										},
										"sink": {
											"path": "$['position']"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"path": "$['name']"
										}
									},
									{
										"source": {
											"name": "date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['date']"
										}
									},
									{
										"source": {
											"name": "start_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['start_date']"
										}
									},
									{
										"source": {
											"name": "end_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['end_date']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_pairing",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_pairing",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "PAIRINGblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF user data to Azure blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PAIRINGblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFPairing": {},
									"PARINGtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_bi_pairing')]",
				"[concat(variables('factoryId'), '/datasets/SF_source_pairing')]",
				"[concat(variables('factoryId'), '/dataflows/PAIRINGblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/user_category_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF user category data to Azure blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "user_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['user_id']"
										}
									},
									{
										"source": {
											"name": "category_type",
											"type": "String"
										},
										"sink": {
											"path": "$['category_type']"
										}
									},
									{
										"source": {
											"name": "effective_start",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['effective_start']"
										}
									},
									{
										"source": {
											"name": "effective_end",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['effective_end']"
										}
									},
									{
										"source": {
											"name": "base_icao_code",
											"type": "String"
										},
										"sink": {
											"path": "$['base_icao_code']"
										}
									},
									{
										"source": {
											"name": "base_iata_code",
											"type": "String"
										},
										"sink": {
											"path": "$['base_iata_code']"
										}
									},
									{
										"source": {
											"name": "base_faa_code",
											"type": "String"
										},
										"sink": {
											"path": "$['base_faa_code']"
										}
									},
									{
										"source": {
											"name": "base_name",
											"type": "String"
										},
										"sink": {
											"path": "$['base_name']"
										}
									},
									{
										"source": {
											"name": "equipment_group_name",
											"type": "String"
										},
										"sink": {
											"path": "$['equipment_group_name']"
										}
									},
									{
										"source": {
											"name": "equipment_group_code",
											"type": "String"
										},
										"sink": {
											"path": "$['equipment_group_code']"
										}
									},
									{
										"source": {
											"name": "position_name",
											"type": "String"
										},
										"sink": {
											"path": "$['position_name']"
										}
									},
									{
										"source": {
											"name": "position_code",
											"type": "String"
										},
										"sink": {
											"path": "$['position_code']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_user_category",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_user_category",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "USERCATEGORYblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF user category data to Azure blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "USERCATEGORYblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFUserCategory": {},
									"USERCATEGORYtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_bi_user_category')]",
				"[concat(variables('factoryId'), '/datasets/SF_source_user_category')]",
				"[concat(variables('factoryId'), '/dataflows/USERCATEGORYblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/user_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF user data to Azure blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "user_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['user_id']"
										}
									},
									{
										"source": {
											"name": "payroll_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['payroll_id']"
										}
									},
									{
										"source": {
											"name": "employee_id",
											"type": "String"
										},
										"sink": {
											"path": "$['employee_id']"
										}
									},
									{
										"source": {
											"name": "username",
											"type": "String"
										},
										"sink": {
											"path": "$['username']"
										}
									},
									{
										"source": {
											"name": "first_name",
											"type": "String"
										},
										"sink": {
											"path": "$['first_name']"
										}
									},
									{
										"source": {
											"name": "middle_name",
											"type": "String"
										},
										"sink": {
											"path": "$['middle_name']"
										}
									},
									{
										"source": {
											"name": "last_name",
											"type": "String"
										},
										"sink": {
											"path": "$['last_name']"
										}
									},
									{
										"source": {
											"name": "preferred_nickname",
											"type": "String"
										},
										"sink": {
											"path": "$['preferred_nickname']"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String"
										},
										"sink": {
											"path": "$['email']"
										}
									},
									{
										"source": {
											"name": "pilot_license",
											"type": "String"
										},
										"sink": {
											"path": "$['pilot_license']"
										}
									},
									{
										"source": {
											"name": "phone_numbers",
											"type": "String"
										},
										"sink": {
											"path": "$['phone_numbers']"
										}
									},
									{
										"source": {
											"name": "date_of_birth",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['date_of_birth']"
										}
									},
									{
										"source": {
											"name": "date_of_hire",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['date_of_hire']"
										}
									},
									{
										"source": {
											"name": "date_of_longevity",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['date_of_longevity']"
										}
									},
									{
										"source": {
											"name": "company_rank",
											"type": "Int32"
										},
										"sink": {
											"path": "$['company_rank']"
										}
									},
									{
										"source": {
											"name": "pilot_rank",
											"type": "Int32"
										},
										"sink": {
											"path": "$['pilot_rank']"
										}
									},
									{
										"source": {
											"name": "fa_rank",
											"type": "Int32"
										},
										"sink": {
											"path": "$['fa_rank']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									},
									{
										"source": {
											"name": "enabled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['enabled']"
										}
									},
									{
										"source": {
											"name": "deleted",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['deleted']"
										}
									},
									{
										"source": {
											"name": "is_disabled",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['is_disabled']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_user",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_user",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "USERblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF user data to Azure blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "USERblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFUser": {},
									"USERtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_bi_user')]",
				"[concat(variables('factoryId'), '/datasets/SF_source_user')]",
				"[concat(variables('factoryId'), '/dataflows/USERblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_airport')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_main_blob_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(concat('bi-flights-',split(utcnow(),'T')[0]),'.json')",
							"type": "Expression"
						},
						"container": "sf-source-airport"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"airport_id": {
							"type": "integer"
						},
						"iata_code": {
							"type": "string"
						},
						"icao_code": {
							"type": "string"
						},
						"faa_code": {
							"type": "string"
						},
						"airport_name": {
							"type": "string"
						},
						"city_name": {
							"type": "string"
						},
						"state_code": {
							"type": "string"
						},
						"country_code": {
							"type": "string"
						},
						"weather_zone": {
							"type": "string"
						},
						"latitude": {
							"type": "string"
						},
						"longitude": {
							"type": "string"
						},
						"elevation_feet": {
							"type": "integer"
						},
						"iana_timezone": {
							"type": "string"
						},
						"is_base": {
							"type": "boolean"
						},
						"base_initial": {
							"type": "null"
						},
						"is_active": {
							"type": "boolean"
						},
						"is_deleted": {
							"type": "boolean"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_main_blob_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_bi_airport')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SkedFlexConnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "airport"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SkedFlexConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_bi_equip_sched')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SkedFlexConnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "equipment_sched"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SkedFlexConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_bi_flight')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SkedFlexConnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "flight"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SkedFlexConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_bi_flight_delay')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SkedFlexConnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "flight_delay"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SkedFlexConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_bi_pairing')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SkedFlexConnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "pairing"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SkedFlexConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_bi_pairing_item')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SkedFlexConnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "pairing_item"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SkedFlexConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_bi_user')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SkedFlexConnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "user"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SkedFlexConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_bi_user_category')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SkedFlexConnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "user_category"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SkedFlexConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_delays')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_main_blob_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(concat('bi-flights-',split(utcnow(),'T')[0]),'.json')",
							"type": "Expression"
						},
						"container": "sf-source-delays"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"flight_id": {
							"type": "integer"
						},
						"delay_type": {
							"type": "string"
						},
						"duration_mins": {
							"type": "integer"
						},
						"delay_code": {
							"type": "string"
						},
						"delay_code_name": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_main_blob_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_equip_sched')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_main_blob_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(concat('bi-flights-',split(utcnow(),'T')[0]),'.json')",
							"type": "Expression"
						},
						"container": "sf-source-equip-sched"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"eqp_sched_id": {
							"type": "integer"
						},
						"ac_registration": {
							"type": "string"
						},
						"status_code": {
							"type": "string"
						},
						"status_name": {
							"type": "string"
						},
						"status_description": {
							"type": "string"
						},
						"start_time": {
							"type": "string"
						},
						"end_time": {
							"type": "string"
						},
						"notes": {
							"type": "string"
						},
						"is_deleted": {
							"type": "boolean"
						},
						"updated_at": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_main_blob_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_flights')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_main_blob_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(concat('bi-flights-',split(utcnow(),'T')[0]),'.json')",
							"type": "Expression"
						},
						"container": "sf-source-flights"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"flight_id": {
							"type": "integer"
						},
						"flight_number": {
							"type": "string"
						},
						"flight_date": {
							"type": "string"
						},
						"aircraft_registration_number": {
							"type": "string"
						},
						"aircraft_type": {
							"type": "string"
						},
						"ops_type": {
							"type": "string"
						},
						"scheduled_departure": {
							"type": "string"
						},
						"scheduled_arrival": {
							"type": "string"
						},
						"estimated_departure": {
							"type": "null"
						},
						"estimated_arrival": {
							"type": "null"
						},
						"actual_oooi_out": {
							"type": "null"
						},
						"actual_oooi_off": {
							"type": "null"
						},
						"actual_oooi_on": {
							"type": "null"
						},
						"actual_oooi_in": {
							"type": "null"
						},
						"base_airport_id": {
							"type": "integer"
						},
						"sched_depart_airport_id": {
							"type": "integer"
						},
						"sched_arrive_airport_id": {
							"type": "integer"
						},
						"actual_depart_airport_id": {
							"type": "null"
						},
						"actual_arrive_airport_id": {
							"type": "null"
						},
						"base_airport": {
							"type": "string"
						},
						"scheduled_departure_airport": {
							"type": "string"
						},
						"scheduled_arrival_airport": {
							"type": "string"
						},
						"actual_departure_airport": {
							"type": "null"
						},
						"actual_arrival_airport": {
							"type": "null"
						},
						"is_verified": {
							"type": "boolean"
						},
						"notes": {
							"type": "null"
						},
						"is_canceled": {
							"type": "boolean"
						},
						"flight_type": {
							"type": "string"
						},
						"cargo_weight": {
							"type": "null"
						},
						"cargo_on": {
							"type": "null"
						},
						"cargo_off": {
							"type": "null"
						},
						"fuel_out": {
							"type": "null"
						},
						"fuel_in": {
							"type": "null"
						},
						"fuel_uplift": {
							"type": "null"
						},
						"fuel_uplifts": {
							"type": "string"
						},
						"maint_log_page": {
							"type": "null"
						},
						"lndg_touchdown_zone": {
							"type": "null"
						},
						"lndg_midfield": {
							"type": "null"
						},
						"lndg_rollout": {
							"type": "null"
						},
						"lndg_actual_braking": {
							"type": "null"
						},
						"updated_at": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_main_blob_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_user')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_main_blob_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(concat('bi-user-',split(utcnow(),'T')[0]),'.json')",
							"type": "Expression"
						},
						"container": "sf-source-user"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_main_blob_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_user_category')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_main_blob_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(concat('bi-user-category-',split(utcnow(),'T')[0]),'.json')",
							"type": "Expression"
						},
						"container": "sf-source-user-category"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "integer"
						},
						"category_type": {
							"type": "string"
						},
						"effective_start": {
							"type": "string"
						},
						"effective_end": {
							"type": "null"
						},
						"base_icao_code": {
							"type": "string"
						},
						"base_iata_code": {
							"type": "string"
						},
						"base_faa_code": {
							"type": "string"
						},
						"base_name": {
							"type": "string"
						},
						"equipment_group_name": {
							"type": "string"
						},
						"equipment_group_code": {
							"type": "string"
						},
						"position_name": {
							"type": "string"
						},
						"position_code": {
							"type": "string"
						},
						"updated_at": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_main_blob_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_AIRPORT_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "airport_id",
						"type": "nvarchar"
					},
					{
						"name": "iata_code",
						"type": "nvarchar"
					},
					{
						"name": "icao_code",
						"type": "nvarchar"
					},
					{
						"name": "faa_code",
						"type": "nvarchar"
					},
					{
						"name": "airport_name",
						"type": "nvarchar"
					},
					{
						"name": "city_name",
						"type": "nvarchar"
					},
					{
						"name": "state_code",
						"type": "nvarchar"
					},
					{
						"name": "country_code",
						"type": "nvarchar"
					},
					{
						"name": "weather_zone",
						"type": "nvarchar"
					},
					{
						"name": "latitude",
						"type": "float"
					},
					{
						"name": "longitude",
						"type": "float"
					},
					{
						"name": "elevation_feet",
						"type": "smallint"
					},
					{
						"name": "iana_timezone",
						"type": "nvarchar"
					},
					{
						"name": "is_base",
						"type": "bit"
					},
					{
						"name": "base_initial",
						"type": "nvarchar"
					},
					{
						"name": "is_active",
						"type": "bit"
					},
					{
						"name": "is_deleted",
						"type": "bit"
					},
					{
						"name": "ADF_TIMESTAMP",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "RUN_ID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SF_AIRPORT_PROD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_edw_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_DELAYS_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "flight_id",
						"type": "int"
					},
					{
						"name": "delay_type",
						"type": "nvarchar"
					},
					{
						"name": "duration_mins",
						"type": "smallint"
					},
					{
						"name": "delay_code",
						"type": "nvarchar"
					},
					{
						"name": "delay_code_name",
						"type": "nvarchar"
					},
					{
						"name": "ADF_TIMESTAMP",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "RUN_ID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SF_DELAYS_PROD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_edw_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_EQUIP_SCHED_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "eqp_sched_id",
						"type": "nvarchar"
					},
					{
						"name": "ac_registration",
						"type": "nvarchar"
					},
					{
						"name": "status_code",
						"type": "nvarchar"
					},
					{
						"name": "status_name",
						"type": "nvarchar"
					},
					{
						"name": "status_description",
						"type": "nvarchar"
					},
					{
						"name": "start_time",
						"type": "datetime"
					},
					{
						"name": "end_time",
						"type": "datetime"
					},
					{
						"name": "notes",
						"type": "nvarchar"
					},
					{
						"name": "is_deleted",
						"type": "bit"
					},
					{
						"name": "updated_at",
						"type": "datetime"
					},
					{
						"name": "ADF_TIMESTAMP",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "RUN_ID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SF_EQUIP_SCHED_PROD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_edw_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_FLIGHT_OFFLINE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SQL_FLIGHT_OFFLINE_PROD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_edw_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_FLIGHT_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "actual_arrival_airport",
						"type": "nvarchar"
					},
					{
						"name": "actual_arrive_airport_id",
						"type": "nvarchar"
					},
					{
						"name": "actual_depart_airport_id",
						"type": "nvarchar"
					},
					{
						"name": "actual_departure_airport",
						"type": "nvarchar"
					},
					{
						"name": "actual_oooi_in",
						"type": "datetime"
					},
					{
						"name": "actual_oooi_off",
						"type": "datetime"
					},
					{
						"name": "actual_oooi_on",
						"type": "datetime"
					},
					{
						"name": "actual_oooi_out",
						"type": "datetime"
					},
					{
						"name": "aircraft_registration_number",
						"type": "nvarchar"
					},
					{
						"name": "aircraft_type",
						"type": "nvarchar"
					},
					{
						"name": "base_airport",
						"type": "nvarchar"
					},
					{
						"name": "base_airport_id",
						"type": "nvarchar"
					},
					{
						"name": "cargo_off",
						"type": "int"
					},
					{
						"name": "cargo_on",
						"type": "int"
					},
					{
						"name": "cargo_weight",
						"type": "int"
					},
					{
						"name": "estimated_arrival",
						"type": "datetime"
					},
					{
						"name": "estimated_departure",
						"type": "datetime"
					},
					{
						"name": "flight_date",
						"type": "date"
					},
					{
						"name": "flight_id",
						"type": "int"
					},
					{
						"name": "flight_number",
						"type": "nvarchar"
					},
					{
						"name": "flight_type",
						"type": "nvarchar"
					},
					{
						"name": "fuel_in",
						"type": "float"
					},
					{
						"name": "fuel_out",
						"type": "float"
					},
					{
						"name": "fuel_uplift",
						"type": "int"
					},
					{
						"name": "fuel_uplifts",
						"type": "nvarchar"
					},
					{
						"name": "is_canceled",
						"type": "nvarchar"
					},
					{
						"name": "is_verified",
						"type": "nvarchar"
					},
					{
						"name": "lndg_actual_braking",
						"type": "nvarchar"
					},
					{
						"name": "lndg_midfield",
						"type": "nvarchar"
					},
					{
						"name": "lndg_rollout",
						"type": "nvarchar"
					},
					{
						"name": "lndg_touchdown_zone",
						"type": "nvarchar"
					},
					{
						"name": "maint_log_page",
						"type": "nvarchar"
					},
					{
						"name": "notes",
						"type": "nvarchar"
					},
					{
						"name": "ops_type",
						"type": "nvarchar"
					},
					{
						"name": "sched_arrive_airport_id",
						"type": "nvarchar"
					},
					{
						"name": "sched_depart_airport_id",
						"type": "nvarchar"
					},
					{
						"name": "scheduled_arrival",
						"type": "datetime2"
					},
					{
						"name": "scheduled_arrival_airport",
						"type": "nvarchar"
					},
					{
						"name": "scheduled_departure",
						"type": "datetime"
					},
					{
						"name": "scheduled_departure_airport",
						"type": "nvarchar"
					},
					{
						"name": "updated_at",
						"type": "datetime"
					},
					{
						"name": "ADF_TIMESTAMP",
						"type": "datetime",
						"scale": 7
					},
					{
						"name": "RUN_ID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SF_FLIGHT_PROD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_edw_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_PAIRING_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "date",
						"type": "date"
					},
					{
						"name": "end_date",
						"type": "date"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "pairing_id",
						"type": "nvarchar"
					},
					{
						"name": "position",
						"type": "nvarchar"
					},
					{
						"name": "start_date",
						"type": "date"
					},
					{
						"name": "updated_at",
						"type": "nvarchar"
					},
					{
						"name": "user_id",
						"type": "nvarchar"
					},
					{
						"name": "ADF_TIMESTAMP",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "RUN_ID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SF_PAIRING_PROD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_edw_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_USER_CATEGORY_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SF_USER_CATEGORY_PROD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_edw_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_USER_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SF_USER_PROD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_edw_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SkedFlexConnection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('SkedFlexConnection_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_edw_connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('eal_edw_connection_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_main_blob_connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('eal_main_blob_connection_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_staging_connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('eal_staging_connection_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AIRPORT trigger 7am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_AIRPORT_PROD SQL Server table at 7 a.m. EDT",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Airport_data",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-28T11:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Airport_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AIRPORT trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_AIRPORT_PROD SQL Server table",
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-16T09:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DELAYS trigger 7am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_DELAYS_PROD SQL Server table at 7 a.m. EDT",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Delay_data",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-28T11:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "AIRPORT trigger 7am",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Delay_data')]",
				"[concat(variables('factoryId'), '/triggers/AIRPORT trigger 7am')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DELAYS trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_DELAYS_PROD SQL Server table",
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-16T09:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "AIRPORT trigger",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/triggers/AIRPORT trigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EQUIP_SCHD trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_EQUIP_SCHD_PROD SQL Server table",
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-16T09:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "DELAYS trigger",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/triggers/DELAYS trigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EQUIP_SCHED trigger 7am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_EQUIP_SCHD_PROD SQL Server table at 7 a.m.",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Equip_sched_data",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-28T11:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "DELAYS trigger 7am",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Equip_sched_data')]",
				"[concat(variables('factoryId'), '/triggers/DELAYS trigger 7am')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHT trigger 7am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_FLIGHT_PROD SQL Server table at 7 a.m. EDT",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Flight_data",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-28T11:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "EQUIP_SCHED trigger 7am",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Flight_data')]",
				"[concat(variables('factoryId'), '/triggers/EQUIP_SCHED trigger 7am')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHT trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL populates dbo.SF_FLIGHT_PROD SQL Server table",
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-06-16T09:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "EQUIP_SCHD trigger",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/triggers/EQUIP_SCHD trigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AIRPORTblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "SFAirport"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_AIRPORT_TABLE",
								"type": "DatasetReference"
							},
							"name": "AIRPORTtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFAirport\nSFAirport derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as double,\n\t\tlongitude as double,\n\t\televation_feet as integer,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> AIRPORTtoSQL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_airport')]",
				"[concat(variables('factoryId'), '/datasets/SQL_AIRPORT_TABLE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DELAYSblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_delays",
								"type": "DatasetReference"
							},
							"name": "SFDelay"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_DELAYS_TABLE",
								"type": "DatasetReference"
							},
							"name": "DelaysToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as string,\n\t\tdelay_type as string,\n\t\tduration_mins as string,\n\t\tdelay_code as string,\n\t\tdelay_code_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFDelay\nSFDelay derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tflight_id as integer,\n\t\tdelay_type as string,\n\t\tduration_mins as integer,\n\t\tdelay_code as string,\n\t\tdelay_code_name as string,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DelaysToSQL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_delays')]",
				"[concat(variables('factoryId'), '/datasets/SQL_DELAYS_TABLE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EQUIPSCHEDblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_equip_sched",
								"type": "DatasetReference"
							},
							"name": "SFEquipSched"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_EQUIP_SCHED_TABLE",
								"type": "DatasetReference"
							},
							"name": "EQUIPSCHEDtoSQL"
						}
					],
					"transformations": [
						{
							"name": "ADDWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\teqp_sched_id as string,\n\t\tac_registration as string,\n\t\tstatus_code as string,\n\t\tstatus_name as string,\n\t\tstatus_description as string,\n\t\tstart_time as string,\n\t\tend_time as string,\n\t\tnotes as string,\n\t\tis_deleted as boolean,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFEquipSched\nSFEquipSched derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> ADDWrkflwIDandTS\nADDWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\teqp_sched_id as string,\n\t\tac_registration as string,\n\t\tstatus_code as string,\n\t\tstatus_name as string,\n\t\tstatus_description as string,\n\t\tstart_time as timestamp,\n\t\tend_time as timestamp,\n\t\tnotes as string,\n\t\tis_deleted as boolean,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EQUIPSCHEDtoSQL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_equip_sched')]",
				"[concat(variables('factoryId'), '/datasets/SQL_EQUIP_SCHED_TABLE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTS_OFLblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_OFFLINE",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						},
						{
							"name": "AircraftTYPEfilter"
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup"
						},
						{
							"name": "UpdateSchdDepAirportCode"
						},
						{
							"name": "RemoveSchdDepAirportCols"
						},
						{
							"name": "SchdArrAirportLookup"
						},
						{
							"name": "UpdateSchdArrAirportCode"
						},
						{
							"name": "RemoveSchArrAirportCols"
						},
						{
							"name": "RemoveOOOIcolumns"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as string,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as string,\n\t\tcargo_on as string,\n\t\tcargo_off as string,\n\t\tfuel_out as string,\n\t\tfuel_in as string,\n\t\tfuel_uplift as string,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nRemoveOOOIcolumns filter(aircraft_type <=> 'OFL') ~> AircraftTYPEfilter\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nAircraftTYPEfilter, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nAddWrkflwIDandTS select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveOOOIcolumns\nRemoveSchArrAirportCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_flights')]",
				"[concat(variables('factoryId'), '/datasets/SF_source_airport')]",
				"[concat(variables('factoryId'), '/datasets/SQL_FLIGHT_OFFLINE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLIGHTSblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_flights",
								"type": "DatasetReference"
							},
							"name": "SFFlight"
						},
						{
							"dataset": {
								"referenceName": "SF_source_airport",
								"type": "DatasetReference"
							},
							"name": "AirportReferenceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_FLIGHT_TABLE",
								"type": "DatasetReference"
							},
							"name": "FlightToSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						},
						{
							"name": "FLTTYPEfilter"
						},
						{
							"name": "ActualAirportIDifNULL"
						},
						{
							"name": "PareAirportReference"
						},
						{
							"name": "SchdDepAirportLookup"
						},
						{
							"name": "UpdateSchdDepAirportCode"
						},
						{
							"name": "RemoveSchdDepAirportCols"
						},
						{
							"name": "SchdArrAirportLookup"
						},
						{
							"name": "UpdateSchdArrAirportCode"
						},
						{
							"name": "RemoveSchArrAirportCols"
						},
						{
							"name": "ActDepAirportLookup"
						},
						{
							"name": "UpdateActDepAirportCode"
						},
						{
							"name": "RemoveActDepAirportCols"
						},
						{
							"name": "ActArrAirportLookup"
						},
						{
							"name": "UpdateActArrAirportCode"
						},
						{
							"name": "RemoveActArrAirportCols"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tflight_id as string,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tops_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tsched_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_arrive_airport_id as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as string,\n\t\tcargo_on as string,\n\t\tcargo_off as string,\n\t\tfuel_out as string,\n\t\tfuel_in as string,\n\t\tfuel_uplift as string,\n\t\tfuel_uplifts as string,\n\t\tmaint_log_page as string,\n\t\tlndg_touchdown_zone as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_actual_braking as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['yyyy-MM-dd'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'decimal') ~> SFFlight\nsource(output(\n\t\tairport_id as string,\n\t\tiata_code as string,\n\t\ticao_code as string,\n\t\tfaa_code as string,\n\t\tairport_name as string,\n\t\tcity_name as string,\n\t\tstate_code as string,\n\t\tcountry_code as string,\n\t\tweather_zone as string,\n\t\tlatitude as string,\n\t\tlongitude as string,\n\t\televation_feet as string,\n\t\tiana_timezone as string,\n\t\tis_base as boolean,\n\t\tbase_initial as string,\n\t\tis_active as boolean,\n\t\tis_deleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AirportReferenceJSON\nSFFlight derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS filter(flight_type <=> 'flight' || flight_type <=> 'continuation' || flight_type <=> 'divert' || flight_type <=> 'return' || flight_type <=> 'taxi-back') ~> FLTTYPEfilter\nFLTTYPEfilter derive(actual_arrive_airport_id = iif(isNull(actual_arrive_airport_id), sched_arrive_airport_id, actual_arrive_airport_id),\n\t\tactual_depart_airport_id = iif(isNull(actual_depart_airport_id) , sched_depart_airport_id, actual_depart_airport_id)) ~> ActualAirportIDifNULL\nAirportReferenceJSON select(mapColumn(\n\t\tairport_id,\n\t\tiata_code,\n\t\ticao_code,\n\t\tfaa_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PareAirportReference\nActualAirportIDifNULL, PareAirportReference lookup(sched_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdDepAirportLookup\nSchdDepAirportLookup derive(scheduled_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdDepAirportCode\nUpdateSchdDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchdDepAirportCols\nRemoveSchdDepAirportCols, PareAirportReference lookup(sched_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SchdArrAirportLookup\nSchdArrAirportLookup derive(scheduled_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateSchdArrAirportCode\nUpdateSchdArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSchArrAirportCols\nRemoveSchArrAirportCols, PareAirportReference lookup(actual_depart_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActDepAirportLookup\nActDepAirportLookup derive(actual_departure_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActDepAirportCode\nUpdateActDepAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\testimated_departure,\n\t\testimated_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActDepAirportCols\nRemoveActDepAirportCols, PareAirportReference lookup(actual_arrive_airport_id == airport_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> ActArrAirportLookup\nActArrAirportLookup derive(actual_arrival_airport = coalesce(iata_code,icao_code,faa_code)) ~> UpdateActArrAirportCode\nUpdateActArrAirportCode select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tops_type,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tscheduled_departure,\n\t\tscheduled_arrival,\n\t\tactual_oooi_out,\n\t\tactual_oooi_off,\n\t\tactual_oooi_on,\n\t\tactual_oooi_in,\n\t\testimated_arrival,\n\t\testimated_departure,\n\t\tbase_airport_id,\n\t\tsched_depart_airport_id,\n\t\tsched_arrive_airport_id,\n\t\tactual_depart_airport_id,\n\t\tactual_arrive_airport_id,\n\t\tbase_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tcargo_on,\n\t\tcargo_off,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tfuel_uplifts,\n\t\tmaint_log_page,\n\t\tlndg_touchdown_zone,\n\t\tlndg_midfield,\n\t\tlndg_rollout,\n\t\tlndg_actual_braking,\n\t\tupdated_at,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActArrAirportCols\nRemoveActArrAirportCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tactual_arrival_airport as string,\n\t\tactual_arrive_airport_id as string,\n\t\tactual_depart_airport_id as string,\n\t\tactual_departure_airport as string,\n\t\tactual_oooi_in as timestamp,\n\t\tactual_oooi_off as timestamp,\n\t\tactual_oooi_on as timestamp,\n\t\tactual_oooi_out as timestamp,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tbase_airport as string,\n\t\tbase_airport_id as string,\n\t\tcargo_off as integer,\n\t\tcargo_on as integer,\n\t\tcargo_weight as integer,\n\t\testimated_arrival as timestamp,\n\t\testimated_departure as timestamp,\n\t\tflight_date as date,\n\t\tflight_id as integer,\n\t\tflight_number as string,\n\t\tflight_type as string,\n\t\tfuel_in as double,\n\t\tfuel_out as double,\n\t\tfuel_uplift as integer,\n\t\tfuel_uplifts as string,\n\t\tis_canceled as string,\n\t\tis_verified as string,\n\t\tlndg_actual_braking as string,\n\t\tlndg_midfield as string,\n\t\tlndg_rollout as string,\n\t\tlndg_touchdown_zone as string,\n\t\tmaint_log_page as string,\n\t\tnotes as string,\n\t\tops_type as string,\n\t\tsched_arrive_airport_id as string,\n\t\tsched_depart_airport_id as string,\n\t\tscheduled_arrival as timestamp,\n\t\tscheduled_arrival_airport as string,\n\t\tscheduled_departure as timestamp,\n\t\tscheduled_departure_airport as string,\n\t\tupdated_at as timestamp,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightToSQL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_flights')]",
				"[concat(variables('factoryId'), '/datasets/SF_source_airport')]",
				"[concat(variables('factoryId'), '/datasets/SQL_FLIGHT_TABLE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PAIRINGblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_pairing",
								"type": "DatasetReference"
							},
							"name": "SFPairing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_PAIRING_TABLE",
								"type": "DatasetReference"
							},
							"name": "PARINGtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tpairing_id as string,\n\t\tuser_id as string,\n\t\tposition as string,\n\t\tname as string,\n\t\tdate as string,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFPairing\nSFPairing derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdate as date,\n\t\tend_date as date,\n\t\tname as string,\n\t\tpairing_id as string,\n\t\tposition as string,\n\t\tstart_date as date,\n\t\tupdated_at as string,\n\t\tuser_id as string,\n\t\tADF_TIMESTAMP as timestamp,\n\t\tRUN_ID as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tdate,\n\t\tend_date,\n\t\tname,\n\t\tpairing_id,\n\t\tposition,\n\t\tstart_date,\n\t\tupdated_at,\n\t\tuser_id,\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t)) ~> PARINGtoSQL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_pairing')]",
				"[concat(variables('factoryId'), '/datasets/SQL_PAIRING_TABLE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/USERCATEGORYblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_user_category",
								"type": "DatasetReference"
							},
							"name": "SFUserCategory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_USER_CATEGORY_TABLE",
								"type": "DatasetReference"
							},
							"name": "USERCATEGORYtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tuser_id as string,\n\t\tcategory_type as string,\n\t\teffective_start as string,\n\t\teffective_end as string,\n\t\tbase_icao_code as string,\n\t\tbase_iata_code as string,\n\t\tbase_faa_code as string,\n\t\tbase_name as string,\n\t\tequipment_group_name as string,\n\t\tequipment_group_code as string,\n\t\tposition_name as string,\n\t\tposition_code as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFUserCategory\nSFUserCategory derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> USERCATEGORYtoSQL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_user_category')]",
				"[concat(variables('factoryId'), '/datasets/SQL_USER_CATEGORY_TABLE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/USERblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_user",
								"type": "DatasetReference"
							},
							"name": "SFUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_USER_TABLE",
								"type": "DatasetReference"
							},
							"name": "USERtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFUser\nSFUser derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> USERtoSQL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_user')]",
				"[concat(variables('factoryId'), '/datasets/SQL_USER_TABLE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_pairing')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_main_blob_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(concat('bi-pairing-',split(utcnow(),'T')[0]),'.json')",
							"type": "Expression"
						},
						"container": "sf-source-pairing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"pairing_id": {
							"type": "integer"
						},
						"user_id": {
							"type": "integer"
						},
						"position": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"date": {
							"type": "date"
						},
						"start_date": {
							"type": "date"
						},
						"end_date": {
							"type": "date"
						},
						"updated_at": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_main_blob_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pairing_Item_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SF user data to Azure blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "pairing_id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['pairing_id']"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['user_id']"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "String"
										},
										"sink": {
											"path": "$['position']"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"path": "$['name']"
										}
									},
									{
										"source": {
											"name": "date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['date']"
										}
									},
									{
										"source": {
											"name": "start_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['start_date']"
										}
									},
									{
										"source": {
											"name": "end_date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['end_date']"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "String"
										},
										"sink": {
											"path": "$['updated_at']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SF_source_bi_pairing_item",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SF_source_pairing_item",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "PAIRINGITEMblobtoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SF user data to Azure blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PAIRINGITEMblobtoSQL",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SFPairingItem": {},
									"PARINGITEMtoSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_bi_pairing_item')]",
				"[concat(variables('factoryId'), '/datasets/SF_source_pairing_item')]",
				"[concat(variables('factoryId'), '/dataflows/PAIRINGITEMblobtoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PAIRINGITEMblobtoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SF_source_pairing_item",
								"type": "DatasetReference"
							},
							"name": "SFPairingItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_PAIRING_ITEM",
								"type": "DatasetReference"
							},
							"name": "PARINGITEMtoSQL"
						}
					],
					"transformations": [
						{
							"name": "AddWrkflwIDandTS"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SFPairingItem\nSFPairingItem derive(ADF_TIMESTAMP = currentTimestamp(),\n\t\tRUN_ID = $run_id) ~> AddWrkflwIDandTS\nAddWrkflwIDandTS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tADF_TIMESTAMP,\n\t\tRUN_ID\n\t)) ~> PARINGITEMtoSQL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SF_source_pairing_item')]",
				"[concat(variables('factoryId'), '/datasets/SQL_PAIRING_ITEM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_source_pairing_item')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_main_blob_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(concat('bi-pairing-item-',split(utcnow(),'T')[0]),'.json')",
							"type": "Expression"
						},
						"container": "sf-source-pairingitem"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_main_blob_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_PAIRING_ITEM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_edw_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SF_PAIRING_ITEM_PROD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_edw_connection')]"
			]
		}
	]
}