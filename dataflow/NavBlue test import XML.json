{
	"name": "NavBlue test import XML",
	"properties": {
		"folder": {
			"name": "NavBlue"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "NAVBLUEtestXMLfile",
						"type": "DatasetReference"
					},
					"name": "NavBlueXML"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQL_TEST_NAVBLUE_FLT_LIST",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {s:Envelope} as ({@xmlns:s} as string, {@xmlns:u} as string, {s:Body} as ({@xmlns:xsd} as string, {@xmlns:xsi} as string, GetFlightListResponse as ({@xmlns} as string, Error as ({@xmlns} as string, {@xsi:nil} as boolean), ExecutionTimeSec as ({@xmlns} as string, {_value_} as double), Flights as ({@xmlns} as string, AircraftId as ({@xsi:nil} as boolean), AtcAlc as ({@xsi:nil} as boolean), DestApt as ({@xsi:nil} as boolean), Key as (FltNum as string, OrigApt as string, RepeatNumber as boolean, StdUtc as string, TestFlight as boolean, WhoAlc as string), StatusList as string)[], Warning as ({@xmlns} as string, {@xsi:nil} as boolean))), {s:Header} as ({o:Security} as ({@s:mustUnderstand} as boolean, {@xmlns:o} as string, {u:Timestamp} as ({@u:Id} as string, {u:Created} as string, {u:Expires} as string))))",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     validationMode: 'none',",
				"     namespaces: false) ~> NavBlueXML",
				"NavBlueXML foldDown(unroll({s:Envelope}.{s:Body}.GetFlightListResponse.Flights),",
				"     mapColumn(",
				"          FltNum = {s:Envelope}.{s:Body}.GetFlightListResponse.Flights.Key.FltNum,",
				"          OrigApt = {s:Envelope}.{s:Body}.GetFlightListResponse.Flights.Key.OrigApt,",
				"          RepeatNumber = {s:Envelope}.{s:Body}.GetFlightListResponse.Flights.Key.RepeatNumber,",
				"          StdUtc = {s:Envelope}.{s:Body}.GetFlightListResponse.Flights.Key.StdUtc,",
				"          TestFlight = {s:Envelope}.{s:Body}.GetFlightListResponse.Flights.Key.TestFlight,",
				"          WhoAlc = {s:Envelope}.{s:Body}.GetFlightListResponse.Flights.Key.WhoAlc",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FltNum,",
				"          OrigApt,",
				"          RepeatNumber,",
				"          StdUtc,",
				"          TestFlight,",
				"          WhoAlc",
				"     )) ~> sink1"
			]
		}
	}
}