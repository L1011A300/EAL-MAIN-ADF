{
	"name": "SQL Navblue Flight List Live Flts",
	"properties": {
		"description": "Filters yesterday NavBlue Flight List for flights that actually operated in SF.",
		"folder": {
			"name": "NavBlue"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQL_NAVBLUE_Flight_List_TEST",
						"type": "DatasetReference"
					},
					"name": "SQLNavblueFlightListTest"
				},
				{
					"dataset": {
						"referenceName": "SQL_FLIGHT_TABLE",
						"type": "DatasetReference"
					},
					"name": "SQLSFFlightProd"
				},
				{
					"dataset": {
						"referenceName": "SQL_AIRPORT_TABLE",
						"type": "DatasetReference"
					},
					"name": "SQLAirportProd"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQL_NAVBLUE_FLIGHT_LIST_LIVE_FLTS",
						"type": "DatasetReference"
					},
					"name": "SQLFlightListLiveFlights"
				}
			],
			"transformations": [
				{
					"name": "CompToSFflights",
					"description": "Compare yesterday's NavBlue flights to flights that actually operated in SF. Pass thru NavBlue flights that actually operated."
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "JoinToAirports",
					"description": "Retrieve ICAO airport codes from SF Airports table to add to SF Flight data.  ICAO airport code is needed as part of primary key to match against NavBlue flight list."
				}
			],
			"scriptLines": [
				"source(output(",
				"          WhoAlc as string,",
				"          FltNum as string,",
				"          StdUtc as timestamp,",
				"          OrigApt as string,",
				"          TestFlight as boolean,",
				"          RepeatNumber as boolean,",
				"          ADF_TIMESTAMP as timestamp,",
				"          RUN_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SQLNavblueFlightListTest",
				"source(output(",
				"          flight_number as string,",
				"          SCHED_DEP_DATE as date,",
				"          scheduled_departure as timestamp,",
				"          sched_depart_airport_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT flight_number, CAST(scheduled_departure AS DATE) AS \\'SCHED_DEP_DATE\\'\\n, scheduled_departure\\n, sched_depart_airport_id\\nFROM dbo.SF_FLIGHT_PROD\\nWHERE aircraft_registration_number IS NOT NULL\\nAND is_canceled = \\'false\\'\\nAND CAST(scheduled_departure AS DATE) = DATEADD(day,-1,CONVERT(date, GETUTCDATE()))',",
				"     format: 'query') ~> SQLSFFlightProd",
				"source(output(",
				"          airport_id as string,",
				"          icao_code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT airport_id\\n, icao_code\\nFROM dbo.SF_AIRPORT_PROD',",
				"     format: 'query') ~> SQLAirportProd",
				"SQLNavblueFlightListTest, JoinToAirports exists(FltNum == flight_number",
				"     && StdUtc == scheduled_departure",
				"     && OrigApt == icao_code,",
				"     negate:false,",
				"     broadcast: 'auto')~> CompToSFflights",
				"SQLSFFlightProd derive(SCHED_DEP_DATE_STR = toString(SCHED_DEP_DATE)) ~> derivedColumn1",
				"derivedColumn1, SQLAirportProd join(sched_depart_airport_id == airport_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinToAirports",
				"CompToSFflights sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SQLFlightListLiveFlights"
			]
		}
	}
}