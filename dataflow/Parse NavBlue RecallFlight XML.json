{
	"name": "Parse NavBlue RecallFlight XML",
	"properties": {
		"folder": {
			"name": "NavBlue"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "NAVBLUE_CSV_RecallFlight",
						"type": "DatasetReference"
					},
					"name": "NavBlueCSVreallyXML"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "OutputToJSON"
				}
			],
			"transformations": [
				{
					"name": "ParseXML"
				},
				{
					"name": "RemoveColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {_col0_} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> NavBlueCSVreallyXML",
				"NavBlueCSVreallyXML parse(EstOutTime = {_col0_} ? (FlightPlan as (FlightPlanSummary as (OutTime as (EstimatedTime as (Value as string))))),",
				"          TakeOffFuelDuration = {_col0_} ? (FlightPlan as (FuelHeader as (TakeOffFuel as (Duration as (Value as string))))),",
				"          TakeOffFuelEstWeight = {_col0_} ? (FlightPlan as (FuelHeader as (TakeOffFuel as (EstimatedWeight as (Value as ({@unit} as string,",
				"          {_value_} as string)))))),",
				"          ArrFuelEstWeight = {_col0_} ? (FlightPlan as (FuelHeader as (ArrivalFuel as (EstimatedWeight as (Value as ({@unit} as string,",
				"          {_value_} as string)))))),",
				"     format: 'xml',",
				"     namespaces: false) ~> ParseXML",
				"ParseXML select(mapColumn(",
				"          EstOutTime = EstOutTime.FlightPlan.FlightPlanSummary.OutTime.EstimatedTime.Value,",
				"          TakeOffFuelDuration = TakeOffFuelDuration.FlightPlan.FuelHeader.TakeOffFuel.Duration.Value,",
				"          TakeOffFuelEstWeightUnit = TakeOffFuelEstWeight.FlightPlan.FuelHeader.TakeOffFuel.EstimatedWeight.Value.{@unit},",
				"          TakeOffFuelEstWeightValue = TakeOffFuelEstWeight.FlightPlan.FuelHeader.TakeOffFuel.EstimatedWeight.Value.{_value_},",
				"          ArrFuelEstWeightUnit = ArrFuelEstWeight.FlightPlan.FuelHeader.ArrivalFuel.EstimatedWeight.Value.{@unit},",
				"          ArrFuelEstWeightValue = ArrFuelEstWeight.FlightPlan.FuelHeader.ArrivalFuel.EstimatedWeight.Value.{_value_}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns",
				"RemoveColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          HTML as (HEAD as (link as ({@rel} as string, {@type} as string, {@href} as string), STYLE as ({@type} as string, {_value_} as string), TITLE as string), BODY as (DIV as (P as ({@class} as string, {_value_} as string)[], BR as string[], PRE as (font as ({@color} as string, {_value_} as string)[], {_value_} as string[])[], {@id} as string, {_value_} as string))),",
				"          {s:Envelope} as ({s:Header} as ({o:Security} as ({u:Timestamp} as ({u:Created} as string, {u:Expires} as string, {u:@Id} as string), {s:@mustUnderstand} as integer)), {s:Body} as (GetFlightListResponse as (Error as ({xsi:@nil} as boolean), Warning as ({xsi:@nil} as boolean), ExecutionTimeSec as double, Flights as (Key as (WhoAlc as string, FltNum as integer, StdUtc as string, OrigApt as string, TestFlight as boolean, RepeatNumber as integer), DestApt as ({xsi:@nil} as boolean), AircraftId as ({xsi:@nil} as boolean), AtcAlc as ({xsi:@nil} as boolean))[])))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          EstOutTime,",
				"          TakeOffFuelDuration,",
				"          TakeOffFuelWeightUnit2 = TakeOffFuelEstWeightUnit,",
				"          TakeOffFuelWeightValue = TakeOffFuelEstWeightValue",
				"     )) ~> OutputToJSON"
			]
		}
	}
}