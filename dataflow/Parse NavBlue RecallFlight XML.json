{
	"name": "Parse NavBlue RecallFlight XML",
	"properties": {
		"folder": {
			"name": "NavBlue"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "NAVBLUE_CSV_RecallFlight",
						"type": "DatasetReference"
					},
					"name": "NavBlueCSVreallyXML"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "NAVBLUE_FLT_DETAIL_TEST",
						"type": "DatasetReference"
					},
					"name": "OutputToSQLServer"
				}
			],
			"transformations": [
				{
					"name": "ParseXML"
				},
				{
					"name": "RemoveColumns"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {_col0_} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> NavBlueCSVreallyXML",
				"NavBlueCSVreallyXML parse(EstOutTime = {_col0_} ? (FlightPlan as (FlightPlanSummary as (OutTime as (EstimatedTime as (Value as string))))),",
				"          TakeOffFuelDuration = {_col0_} ? (FlightPlan as (FuelHeader as (TakeOffFuel as (Duration as (Value as string))))),",
				"          TakeOffFuelEstWeight = {_col0_} ? (FlightPlan as (FuelHeader as (TakeOffFuel as (EstimatedWeight as (Value as ({@unit} as string,",
				"          {_value_} as integer)))))),",
				"          ArrFuelEstWeight = {_col0_} ? (FlightPlan as (FuelHeader as (ArrivalFuel as (EstimatedWeight as (Value as ({@unit} as string,",
				"          {_value_} as integer)))))),",
				"          FlightPlanID = {_col0_} ? (FlightPlan as ({@flightPlanId} as string)),",
				"          FltNbr = {_col0_} ? (FlightPlan as (M633SupplementaryHeader as (Flight as (FlightIdentification as (FlightNumber as ({@number} as string)))))),",
				"          TailNbr = {_col0_} ? (FlightPlan as (M633SupplementaryHeader as (Aircraft as ({@aircraftRegistration} as string)))),",
				"          DepICAOCode = {_col0_} ? (FlightPlan as (M633SupplementaryHeader as (Flight as (DepartureAirport as (AirportICAOCode as string))))),",
				"     format: 'xml',",
				"     namespaces: false) ~> ParseXML",
				"ParseXML select(mapColumn(",
				"          FlightPlanID = FlightPlanID.FlightPlan.{@flightPlanId},",
				"          FltNbr = FltNbr.FlightPlan.M633SupplementaryHeader.Flight.FlightIdentification.FlightNumber.{@number},",
				"          EstOutTime = EstOutTime.FlightPlan.FlightPlanSummary.OutTime.EstimatedTime.Value,",
				"          TakeOffFuelDuration = TakeOffFuelDuration.FlightPlan.FuelHeader.TakeOffFuel.Duration.Value,",
				"          TakeOffFuelEstWeightUnit = TakeOffFuelEstWeight.FlightPlan.FuelHeader.TakeOffFuel.EstimatedWeight.Value.{@unit},",
				"          TakeOffFuelEstWeightValue = TakeOffFuelEstWeight.FlightPlan.FuelHeader.TakeOffFuel.EstimatedWeight.Value.{_value_},",
				"          ArrFuelEstWeightUnit = ArrFuelEstWeight.FlightPlan.FuelHeader.ArrivalFuel.EstimatedWeight.Value.{@unit},",
				"          ArrFuelEstWeightValue = ArrFuelEstWeight.FlightPlan.FuelHeader.ArrivalFuel.EstimatedWeight.Value.{_value_},",
				"          TailNbr = TailNbr.FlightPlan.M633SupplementaryHeader.Aircraft.{@aircraftRegistration},",
				"          DepICAOcode = DepICAOCode.FlightPlan.M633SupplementaryHeader.Flight.DepartureAirport.AirportICAOCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns",
				"RemoveColumns derive(EstOutTime = toTimestamp(EstOutTime,'yyyy-MM-dd\\'T\\'HH:mm:ss')) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FlightPlanID,",
				"          FltNbr,",
				"          EstOutTime,",
				"          TakeOffFuelDuration,",
				"          TakeOffFuelEstWeightUnit,",
				"          TakeOffFuelEstWeightValue,",
				"          ArrFuelEstWeightUnit,",
				"          ArrFuelEstWeightValue",
				"     )) ~> OutputToSQLServer"
			]
		}
	}
}